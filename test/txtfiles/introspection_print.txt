─────────────────────────────── inspecting: print ──────────────────────────────
   ╭──── Function: print ─────────────────────────────────────────────────╮
   │                                                                      │
   │ (1)  print(io::IO, ex::Union)                                        │
   │ (2)  print(io::IO, s::Union)                                         │
   │ (3)  print(io::IO, x::Union)                                         │
   │ (4)  print(io::IO, t::Text{<:Function})                              │
   │ (5)  print(io::IO, t::Text)                                          │
   │ (6)  print(io::IO, x::Dates.Period)                                  │
   │ (7)  print(io::IO, n::Unsigned)                                      │
   │ (8)  print(io::IO, ::MIME) where mime                                │
   │ (9)  print(io::IO,                                                   │
   │     renderable::Term.Renderables.AbstractRenderable; highlight)      │
   │ (10)  print(io::IO, str::ProgressLogging.ProgressString)             │
   │                                                                      │
   ╰─────────────────────────────────────────────────────── 36 methods ───╯
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ Docstring ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
       ┌─────────────────────────────────────────────────────────┐             
       │  print([io::IO], xs...)                                 │             
       └─────────────────────────────────────────────────────────┘             
                                                                               
   Write to `io` (or to the default output stream `stdout` (@ref) if `io`      
   is not given) a canonical (un-decorated) text representation. The           
   representation used by `print` includes minimal formatting and tries        
   to avoid Julia-specific details.                                            
                                                                               
   `print` falls back to calling `show`, so most types should just define      
   `show`. Define `print` if your type has a separate "plain"                  
   representation. For example, `show` displays strings with quotes, and       
   `print` displays strings without quotes.                                    
                                                                               
   See also `println` (@ref), `string` (@ref), `printstyled` (@ref).           
                                                                               
   ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓             
   ┃                          Examples                           ┃             
   ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛             
                                                                               
       ┌─────────────────────────────────────────────────────────┐             
       │  julia> print("Hello World!")                           │             
       │  Hello World!                                           │             
       │  julia> io = IOBuffer();                                │             
       │                                                         │             
       │  julia> print(io, "Hello", ' ', :World!)                │             
       │                                                         │             
       │  julia> String(take!(io))                               │             
       │  "Hello World!"                                         │             
       └─────────────────────────────────────────── jldoctest ───┘             
                                                                               
       ┌─────────────────────────────────────────────────────────┐             
       │  print(io::IO, renderable::AbstractRenderable)          │             
       └─────────────────────────────────────────────────────────┘             
                                                                               
   Print a renderable to an IO                                                 




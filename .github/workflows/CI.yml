name: CI
on:
  push:
   branches: [master]
  pull_request:
    types:
    - opened
    - reopened
    - synchronize

concurrency: 
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  test:
    name: Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }} - ${{ github.event_name }}
    continue-on-error: ${{ matrix.experimental }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        version:
          - '1.6'
          - '1' # latest 1.X
        experimental:
          - false
        os:
          - ubuntu-latest
          - windows-latest
          - macOS-latest
        arch: [x64]
        include:
          - os: ubuntu-latest
            experimental: true
            version: '~1.11.0-0'  # upcoming julia version, next `rc`
            arch: x64
          - os: ubuntu-latest
            experimental: true
            version: 'nightly'
            arch: x64
    steps:
      - uses: actions/checkout@v3
      - uses: julia-actions/setup-julia@latest
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}
      - uses: julia-actions/cache@v1
      - uses: julia-actions/julia-buildpkg@latest
      - uses: julia-actions/julia-runtest@latest
      - uses: julia-actions/julia-processcoverage@latest
      - uses: codecov/codecov-action@v3
        with:
          file: lcov.info

  format:
    runs-on: ubuntu-latest
    steps:
      - uses: julia-actions/setup-julia@latest
        with:
          version: '1' # latest 1.X
      - uses: actions/checkout@v3
      - name: Install JuliaFormatter and format
        # This will use the latest version by default but you can set the version like so:
        #
        # julia  -e 'using Pkg; Pkg.add(PackageSpec(name="JuliaFormatter", version="0.13.0"))'
        run: |
          julia  -e 'using Pkg; Pkg.add(PackageSpec(name="JuliaFormatter"))'
          julia  -e 'using JuliaFormatter; format(["src", "test"], verbose=true)'
      - name: Format check
        run: |
          julia -e '
          out = Cmd(`git diff --name-only`) |> read |> String
          if out == ""
              exit(0)
          else
              @warn "Some files have not been formatted !!!"
              write(stdout, out)
              exit(1)
          end'

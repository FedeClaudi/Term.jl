var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = Term","category":"page"},{"location":"#Term","page":"Home","title":"Term","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"<!–  Documentation for Term.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [Term]","category":"page"},{"location":"#Term.ANSICode-Tuple{Any}","page":"Home","title":"Term.ANSICode","text":"ANSICode(color; bg::Bool=false)\n\nCreate ANSI tags for colors.\n\n\n\n\n\n","category":"method"},{"location":"#Term.CodeTheme","page":"Home","title":"Term.CodeTheme","text":"Custom hilighting theme for Highlighters.jl https://juliadocs.github.io/Highlights.jl/stable/man/theme/\n\n\n\n\n\n","category":"type"},{"location":"#Term.Theme","page":"Home","title":"Term.Theme","text":"Theme\n\nStores colors for different semantically relevant items, used to  style outputs to terminal.\n\n\n\n\n\n","category":"type"},{"location":"#Term.measure.Measure-Tuple{Term.segment.Segment}","page":"Home","title":"Term.measure.Measure","text":"Measure(seg::Segment)\n\ngives the measure of a segment\n\n\n\n\n\n","category":"method"},{"location":"#Term.measure.Measure-Tuple{Vector{Term.segment.Segment}}","page":"Home","title":"Term.measure.Measure","text":"Measure(segments::Vector{Segment})\n\ngives the measure of a vector of segments\n\n\n\n\n\n","category":"method"},{"location":"#Highlights.Format.render-Tuple{IO, MIME{Symbol(\"text/ansi\")}, Highlights.Format.TokenIterator}","page":"Home","title":"Highlights.Format.render","text":"Format.render(io::IO, ::MIME\"text/ansi\", tokens::Format.TokenIterator)\n\ncustom ANSI lexer for Highlighters.jl\n\n\n\n\n\n","category":"method"},{"location":"#Term.chars-Tuple{AbstractString}","page":"Home","title":"Term.chars","text":"Split a string into a vector of Chars.\n\n\n\n\n\n","category":"method"},{"location":"#Term.cleantext-Tuple{AbstractString}","page":"Home","title":"Term.cleantext","text":"cleantext(str::AbstractString)\n\nRemove all style information from a string.\n\n\n\n\n\n","category":"method"},{"location":"#Term.do_by_line-Tuple{Function, AbstractString}","page":"Home","title":"Term.do_by_line","text":"do_by_line(fn::Function, text::AbstractString)\n\nApply fn to each line in the text.\n\nThe function fn should accept a single ::AbstractString argument.\n\n\n\n\n\n","category":"method"},{"location":"#Term.escape_brackets-Tuple{AbstractString}","page":"Home","title":"Term.escape_brackets","text":"remove_ansi(str::AbstractString)::AbstractString\n\nReplace each squared bracket with a double copy of itself\n\n\n\n\n\n","category":"method"},{"location":"#Term.get_last_valid_str_idx-Tuple{AbstractString, Int64}","page":"Home","title":"Term.get_last_valid_str_idx","text":"get_last_valid_str_idx(str::AbstractString, idx::Int)\n\nGet valid index to cut a string at.\n\nWhen indexing a string, the number of indices is given by the the sum of the ncodeunits of each Char, but some indices will not be valid. This function ensures that given a (potentially) not valid index, the last valid one is elected.\n\n\n\n\n\n","category":"method"},{"location":"#Term.get_next_valid_str_idx-Tuple{AbstractString, Int64}","page":"Home","title":"Term.get_next_valid_str_idx","text":"getnextvalidstridx(str::AbstractString, idx::Int)\n\nGet valid index to cut a string at.\n\nWhen indexing a string, the number of indices is given by the the sum of the ncodeunits of each Char, but some indices will not be valid. This function ensures that given a (potentially) not valid index, the next valid one is elected.\n\n\n\n\n\n","category":"method"},{"location":"#Term.get_valid_chars!-Tuple{Vector{Int64}, Any, Int64}","page":"Home","title":"Term.get_valid_chars!","text":"get_valid_chars!(valid_chars::Vector{Int}, tag, δ::Int)\n\nRecursively extract valid characters (i.e. not in markup tags) from a string.\n\n\n\n\n\n","category":"method"},{"location":"#Term.highlight-Tuple{AbstractString, Term.Theme, Symbol}","page":"Home","title":"Term.highlight","text":"highlight(text::AbstractString, theme::Theme, like::Symbol)\n\nHilights an entire text as if it was a type of semantically relevant text of type :like.\n\n\n\n\n\n","category":"method"},{"location":"#Term.highlight-Tuple{AbstractString, Term.Theme}","page":"Home","title":"Term.highlight","text":"highlight(text::AbstractString, theme::Theme)\n\nHighlighs a text introducing markup to style semantically relevant segments, colors specified by a theme object\n\n\n\n\n\n","category":"method"},{"location":"#Term.highlight_syntax-Tuple{AbstractString}","page":"Home","title":"Term.highlight_syntax","text":"highlight_syntax(code::AbstractString; style::Bool=true)\n\nHighlight Julia code syntax in a string.\n\n\n\n\n\n","category":"method"},{"location":"#Term.join_lines-Tuple{Any}","page":"Home","title":"Term.join_lines","text":"join_lines(lines)\n\nMerge a vector of strings in a single string.\n\n\n\n\n\n","category":"method"},{"location":"#Term.load_code_and_highlight-Tuple{AbstractString, Int64}","page":"Home","title":"Term.load_code_and_highlight","text":"load_code_and_highlight(path::AbstractString, lineno::Int; δ::Int=3, width::INt=120)\n\nLoad a file, get the code and format it. Return styled text\n\n\n\n\n\n","category":"method"},{"location":"#Term.nospaces-Tuple{AbstractString}","page":"Home","title":"Term.nospaces","text":"nospaces(text::AbstractString)\n\nRemove all spaces from a string.\n\n\n\n\n\n","category":"method"},{"location":"#Term.read_file_lines-Tuple{AbstractString, Int64, Int64}","page":"Home","title":"Term.read_file_lines","text":"read_file_lines(path::String, start::Int, stop::Int)\n\nRead a file and select only lines in range start -> stop.\n\nReturns a vector of tuples with the line number and line content.\n\n\n\n\n\n","category":"method"},{"location":"#Term.reinsert_double_brackets-Tuple{AbstractString}","page":"Home","title":"Term.reinsert_double_brackets","text":"reinsert_double_brackets(text::AbstractString)::AbstractString\n\nInsert previously replaced double brackets\n\n\n\n\n\n","category":"method"},{"location":"#Term.remove_ansi-Tuple{AbstractString}","page":"Home","title":"Term.remove_ansi","text":"remove_ansi(str::AbstractString)::AbstractString\n\nRemove all ANSI tags from a string of text\n\n\n\n\n\n","category":"method"},{"location":"#Term.remove_brackets-Tuple{AbstractString}","page":"Home","title":"Term.remove_brackets","text":"remove_brackets(text::AbstractString)\n\nRemove all () brackets from a string.\n\n\n\n\n\n","category":"method"},{"location":"#Term.remove_markup-Tuple{AbstractString}","page":"Home","title":"Term.remove_markup","text":"remove_markup(input_text::AbstractString)::AbstractString\n\nRemove all markup tags from a string of text.\n\n\n\n\n\n","category":"method"},{"location":"#Term.remove_markup_open-Tuple{AbstractString}","page":"Home","title":"Term.remove_markup_open","text":"remove_markup_open(text::AbstractString)\n\nRemove all opening markup tags from a string of text\n\n\n\n\n\n","category":"method"},{"location":"#Term.replace_double_brackets-Tuple{AbstractString}","page":"Home","title":"Term.replace_double_brackets","text":"replace_double_brackets(text::AbstractString)::AbstractString\n\nReplace double brackets with %% and ±± to avoid them being picked up by markup extraction\n\n\n\n\n\n","category":"method"},{"location":"#Term.replace_text","page":"Home","title":"Term.replace_text","text":"replace_text(text::AbstractString, start::Int, stop::Int, char::Char='_')\n\nReplace a section of a text  between start and stop with another string composed of repeats of a given character char.\n\n\n\n\n\n","category":"function"},{"location":"#Term.replace_text-Tuple{AbstractString, Int64, Int64, AbstractString}","page":"Home","title":"Term.replace_text","text":"replace_text(text::AbstractString, start::Int, stop::Int, replace::AbstractString)\n\nReplace a section of a text between start and stop with replace.\n\n\n\n\n\n","category":"method"},{"location":"#Term.reshape_text-Tuple{AbstractString, Int64}","page":"Home","title":"Term.reshape_text","text":"reshape_text(text::AbstractString, width::Int)\n\nReshape text to have a given width.\n\nWhen text is longer than width, it gets cut into multiple lines. This is done carefully to preserve style information by: avoiding  cutting inside style markup and copying markup tags over to new lines so that the style is correctly applied.\n\n\n\n\n\n","category":"method"},{"location":"#Term.split_lines-Tuple{AbstractString}","page":"Home","title":"Term.split_lines","text":"split_lines(text::AbstractString)\n\nSplit a string into its composing lines.\n\n\n\n\n\n","category":"method"},{"location":"#Term.split_lines-Tuple{Any}","page":"Home","title":"Term.split_lines","text":"split_lines(renderable)\n\nSplit a renderable's text.\n\n\n\n\n\n","category":"method"},{"location":"#Term.square_to_round_brackets-Tuple{AbstractString}","page":"Home","title":"Term.square_to_round_brackets","text":"square_to_round_brackets(text::AbstractString)\n\nReplace square brackets with round ones.\n\n\n\n\n\n","category":"method"},{"location":"#Term.textlen-Tuple{AbstractString}","page":"Home","title":"Term.textlen","text":"textlen(x::AbstractString)\n\nGet length of text after all style information is removed.\n\n\n\n\n\n","category":"method"},{"location":"#Term.truncate-Tuple{AbstractString, Int64}","page":"Home","title":"Term.truncate","text":"truncate(text::AbstractString, width::Int)\n\nShorten a string of text to a target width\n\n\n\n\n\n","category":"method"},{"location":"#Term.unescape_brackets-Tuple{AbstractString}","page":"Home","title":"Term.unescape_brackets","text":"unescape_brackets(text::AbstractString)::AbstractString\n\nReplece every double squared parenthesis with a single copy of itself\n\n\n\n\n\n","category":"method"},{"location":"#Term.unspace_commas-Tuple{AbstractString}","page":"Home","title":"Term.unspace_commas","text":"unspace_commas(text::AbstractString)\n\nRemove spaces after commas.\n\n\n\n\n\n","category":"method"},{"location":"#Term.@make_color_macro-Tuple{Any}","page":"Home","title":"Term.@make_color_macro","text":"Macro to create macros such as @green which colors text accordingly\n\n\n\n\n\n","category":"macro"},{"location":"#Term.@make_mode_macro-Tuple{Any}","page":"Home","title":"Term.@make_mode_macro","text":"Macro to create macros such as @underline which styles text accordingly.\n\n\n\n\n\n","category":"macro"},{"location":"#Term.@style-Tuple{Any, Vararg{Any, N} where N}","page":"Home","title":"Term.@style","text":"@style \"text\" style1 style2...\n\nApplies a sequence of styles to a piece of text, such that\n\nprintln(@style \"my text\" bold green underline)\n\nwill print my text as bold, green and underlined\n\n\n\n\n\n","category":"macro"},{"location":"","page":"Home","title":"Home","text":"–>","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Term\n\nprint(\n    Panel(\n        \"[red]test panel[/red]\"\n    )\n)","category":"page"}]
}

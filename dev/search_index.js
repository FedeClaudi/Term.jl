var documenterSearchIndex = {"docs":
[{"location":"adv/introspection/#Introspection","page":"Introspection","title":"Introspection","text":"","category":"section"},{"location":"adv/introspection/","page":"Introspection","title":"Introspection","text":"Introspection refers to code that looks into another bit of code (or itself) to give you more details about it. ","category":"page"},{"location":"adv/introspection/","page":"Introspection","title":"Introspection","text":"tip: Check out REPR\nThe easiest way to do introspection with Term is to use the Term Repr functionality including functions such as  termshow and @showme to get all the details you need about your Julia code. Head over there to find out more. ","category":"page"},{"location":"adv/introspection/#inspect","page":"Introspection","title":"inspect","text":"","category":"section"},{"location":"adv/introspection/","page":"Introspection","title":"Introspection","text":"You're using a new library, trying to get a hold of the different types they've defined and how they're used. We've all been there, it can take a while and be quite confusing.  Term to the rescue!","category":"page"},{"location":"adv/introspection/","page":"Introspection","title":"Introspection","text":"You can now use inspect(T::DataType) to get all information you possibly need about a type T (and some more). You get: docstring, definition, constructor methods, methods using T and methods using T's supertypes. It can be quite a lot of stuff, so you can use some conveniently placed tags to choose what you want to see:","category":"page"},{"location":"adv/introspection/","page":"Introspection","title":"Introspection","text":"CurrentModule = Introspection","category":"page"},{"location":"adv/introspection/","page":"Introspection","title":"Introspection","text":"inspect","category":"page"},{"location":"adv/introspection/#Term.Introspection.inspect","page":"Introspection","title":"Term.Introspection.inspect","text":"inspect(T::DataType; documentation::Bool=false, constructors::Bool=true, methods::Bool=true, supertypes::Bool=true)\n\nInspect a DataType to show info such as docstring, constructors and methods. Flags can be used to choose the level of detail in the information presented:\n\ndocumentation: show docstring with termshow\nconstructors: show T constructors\nmethods: show methods using T in their signature\nsupertypes: show methods using T's supertypes in their signature\n\n\n\n\n\n","category":"function"},{"location":"adv/introspection/","page":"Introspection","title":"Introspection","text":"Try, for example: using Term; inspect(Panel, documentation=true).","category":"page"},{"location":"adv/introspection/#typestree","page":"Introspection","title":"typestree","text":"","category":"section"},{"location":"adv/introspection/","page":"Introspection","title":"Introspection","text":"As you know, one of Julia's defining features is its hierarchical types structure. Sometimes, you want to get an overview of this hierarchy but there isn't always a convenient way achieve that... or is there...","category":"page"},{"location":"adv/introspection/","page":"Introspection","title":"Introspection","text":"import Term: typestree\n\nprint(typestree(Float64))\n","category":"page"},{"location":"adv/introspection/#Expression-and-expressiontree","page":"Introspection","title":"Expression & expressiontree","text":"","category":"section"},{"location":"adv/introspection/","page":"Introspection","title":"Introspection","text":"If you're doing a bit of metaprogramming (or teaching it to new Julia coders), you want to get an idea of what the parts of the Expr you're building are. You can use expressiontree to get a Tree based visualization:","category":"page"},{"location":"adv/introspection/","page":"Introspection","title":"Introspection","text":"import Term: expressiontree\nexpr = :(2x + √x^y)\nexpressiontree(expr)","category":"page"},{"location":"adv/introspection/","page":"Introspection","title":"Introspection","text":"enjoy!","category":"page"},{"location":"api/api_compositors/#Compositors","page":"Compositors","title":"Compositors","text":"","category":"section"},{"location":"api/api_compositors/","page":"Compositors","title":"Compositors","text":"CurrentModule = Term.Compositors","category":"page"},{"location":"api/api_compositors/","page":"Compositors","title":"Compositors","text":"Pages   = [\"api_compositors.md\"]","category":"page"},{"location":"api/api_compositors/","page":"Compositors","title":"Compositors","text":"Modules = [Compositors]","category":"page"},{"location":"api/api_compositors/#Term.Compositors.Compositor","page":"Compositors","title":"Term.Compositors.Compositor","text":"mutable struct Compositor\n    layout::Expr\n    elements::Dict{Symbol,LayoutElement}\nend\n\nA layout compositor, creates an updatable layout from an expression.\n\n\n\n\n\n","category":"type"},{"location":"api/api_compositors/#Term.Compositors.Compositor-Tuple{Expr}","page":"Compositors","title":"Term.Compositors.Compositor","text":"Compositor(layout::Expr; hpad::Int = 0, vpad::Int = 0, check::Bool = true, kwargs...)\n\nConstructor. Parses a layout expression and creates LayoutElements for  each element in the expression.\n\n\n\n\n\n","category":"method"},{"location":"api/api_compositors/#Base.show-Tuple{IO, MIME{Symbol(\"text/plain\")}, Compositor}","page":"Compositors","title":"Base.show","text":"Base.show(io::IO, ::MIME\"text/plain\", compositor::Compositor)\n\nShow a compositor.\n\n\n\n\n\n","category":"method"},{"location":"api/api_compositors/#Term.Compositors.collect_elements-Tuple{Expr}","page":"Compositors","title":"Term.Compositors.collect_elements","text":"collect_elements(ex::Expr)\n\nCollects elements (individual LayoutElements) that are in a layout expresssion.\n\n\n\n\n\n","category":"method"},{"location":"api/api_compositors/#Term.Compositors.extract_renderable_from_kwargs-Tuple{Any, Any, Any}","page":"Compositors","title":"Term.Compositors.extract_renderable_from_kwargs","text":"extract_renderable_from_kwargs(s, h, w; kwargs...)\n\nWhen passing kwargs to a Compositor, check for renderables that are  to be assigned to its content.\n\n\n\n\n\n","category":"method"},{"location":"api/api_compositors/#Term.Compositors.get_elements_and_sizes-Tuple{Expr}","page":"Compositors","title":"Term.Compositors.get_elements_and_sizes","text":"get_elements_and_sizes(ex::Expr)\n\nGet elements names and sizes.\n\n\n\n\n\n","category":"method"},{"location":"api/api_compositors/#Term.Compositors.parse_single_element_layout-Tuple{Expr}","page":"Compositors","title":"Term.Compositors.parse_single_element_layout","text":"parse_single_element_layout(ex::Expr)\n\nParse an expression with a single layout element, like :(A(5, 25)) or :(A)\n\n\n\n\n\n","category":"method"},{"location":"api/api_compositors/#Term.Compositors.render-Tuple{Compositor}","page":"Compositors","title":"Term.Compositors.render","text":"render(compositor::Compositor; show_placeholders = false)\n\nRender a compositor's current layout. \n\nGet a renderable from each LayoutElement in the compositor and evaluate the layout expression interpolating the renderables.\n\n\n\n\n\n","category":"method"},{"location":"api/api_compositors/#Term.update!-Tuple{Compositor, Symbol, Union{String, Term.Renderables.AbstractRenderable}}","page":"Compositors","title":"Term.update!","text":"function update!(\n    compositor::Compositor,\n    id::Symbol,\n    content::Union{String,AbstractRenderable},\n)\n\nUpdate a LayoutElement in a Compositor with new content. If the content's measure doesn't match the pre-defined size of  the LayoutElement, it prints a warning message.\n\n\n\n\n\n","category":"method"},{"location":"basics/colors_and_theme/#Colors","page":"Colors","title":"Colors","text":"","category":"section"},{"location":"basics/colors_and_theme/","page":"Colors","title":"Colors","text":"Okay, so far so good. We can use macros like @red and the tprint function to print colored strings. But so far we've only been using few named colors, but..","category":"page"},{"location":"basics/colors_and_theme/","page":"Colors","title":"Colors","text":"import Term: rint, tprint # hide\nfunction rainbow_maker() # hide\n    text = \"there's a whole rainbow\\n of colors out there\" # hide\n    _n = Int(length(text)/2)  # hide\n    R = hcat(range(30, 255, length=_n), range(255, 60, length=_n))  # hide\n    G =hcat(range(255, 60, length=_n), range(60, 120, length=_n))  # hide\n    B = range(50, 255, length=length(text))  # hide\n    out = \"\"  # hide\n    for n in 1:length(text)  # hide\n        r, g, b = rint(R[n]), rint(G[n]), rint(B[n])  # hide\n        out *= \"{($r, $g, $b)}$(text[n]){/($r, $g, $b)}\"  # hide\n    end # hide\n    return out  # hide\nend # hide\ntprint(rainbow_maker(); highlight=false) # hide","category":"page"},{"location":"basics/colors_and_theme/","page":"Colors","title":"Colors","text":"so how can we use different kinds of colors? It's all done through Term's markup syntax of course. Look:","category":"page"},{"location":"basics/colors_and_theme/","page":"Colors","title":"Colors","text":"using Term: tprint # hide\ntprint(\"{(255, 50, 100)}colors!{/(255, 50, 100)}\"; highlight=false)","category":"page"},{"location":"basics/colors_and_theme/","page":"Colors","title":"Colors","text":"yep, you can pass a set of (r, g, b) values and that'll do it. Personally, I prefer working with hex codes, and so Term can accept them too:","category":"page"},{"location":"basics/colors_and_theme/","page":"Colors","title":"Colors","text":"using Term: tprint # hide\nindigo = \"#42A5F5\"\n\ntprint(\"Some {$indigo}color!{/$indigo}\"; highlight=false)","category":"page"},{"location":"basics/colors_and_theme/#Under-the-hood","page":"Colors","title":"Under the hood","text":"","category":"section"},{"location":"basics/colors_and_theme/","page":"Colors","title":"Colors","text":"What Term is doing here is taking each bit of style information in the markup tag (each word or each (...) within {...}) and constructing style codes with an ANSICode object.","category":"page"},{"location":"basics/colors_and_theme/","page":"Colors","title":"Colors","text":"If the style information represents a color, Term first represents it as a AbstractColor type: NamedColor or BitColor or RGBColor.  ","category":"page"},{"location":"basics/colors_and_theme/","page":"Colors","title":"Colors","text":"NamedColor objects represent simple colors like red and blue, BitColor represent 16-bit colors like dark_goldenrod and RGBColor, surprisingly, represents rgb-style colors. There's no method to represent hex colors as these are converted into rgb first. ","category":"page"},{"location":"basics/colors_and_theme/","page":"Colors","title":"Colors","text":"The distinction between NamedColor, BitColor and RGBColor is necessary because the three color styles are represented by a different syntax in the ANSI codes. Naturally, Term users won't normally worry about this and can use whichever color formulation is most convenient.","category":"page"},{"location":"basics/colors_and_theme/#ThemeDocs","page":"Colors","title":"Theme","text":"","category":"section"},{"location":"basics/colors_and_theme/","page":"Colors","title":"Colors","text":"Term defines a Theme type that carries styling information used throughout.  It tells highlight what color things should be, it stores the colors of elements of Tree, and of the Repr functionality.","category":"page"},{"location":"basics/colors_and_theme/","page":"Colors","title":"Colors","text":"import Term: Theme, set_theme, TERM_THEME\n\ndefault = TERM_THEME[]","category":"page"},{"location":"basics/colors_and_theme/","page":"Colors","title":"Colors","text":"You can create a new theme with different colors:","category":"page"},{"location":"basics/colors_and_theme/","page":"Colors","title":"Colors","text":"newtheme = Theme(string=\"red\", code=\"black on_white\")","category":"page"},{"location":"basics/colors_and_theme/","page":"Colors","title":"Colors","text":"and set it as the new theme to be used by Term:","category":"page"},{"location":"basics/colors_and_theme/","page":"Colors","title":"Colors","text":"set_theme(newtheme)","category":"page"},{"location":"basics/colors_and_theme/","page":"Colors","title":"Colors","text":"set_theme(Theme()) # hide","category":"page"},{"location":"basics/colors_and_theme/","page":"Colors","title":"Colors","text":"The default theme used by Term is tailored for a dark terminal, if you fancy a lighter terminal experience, you might want to:","category":"page"},{"location":"basics/colors_and_theme/","page":"Colors","title":"Colors","text":"import Term: set_theme, LightTheme\n\nset_theme(LightTheme)","category":"page"},{"location":"ren/table/#Table","page":"Table","title":"Table","text":"","category":"section"},{"location":"ren/table/","page":"Table","title":"Table","text":"You know what a table is. You probably also know that Julia has an awesome Tables interface for handling tabular data (e.g. that's what DataFrames uses). All that Term does here is that that and make it look fancy. ","category":"page"},{"location":"ren/table/","page":"Table","title":"Table","text":"using Term.Tables\nt = 1:3\ndata = hcat(t, rand(Int8, length(t)))\nTable(data) # or use a matrix!","category":"page"},{"location":"ren/table/","page":"Table","title":"Table","text":"nothing spectacular so far, but Table has a ton of options.","category":"page"},{"location":"ren/table/#Box-style","page":"Table","title":"Box style","text":"","category":"section"},{"location":"ren/table/","page":"Table","title":"Table","text":"You can adjust the box used and its style","category":"page"},{"location":"ren/table/","page":"Table","title":"Table","text":"Table(data; box=:ROUNDED, style=\"red\")","category":"page"},{"location":"ren/table/","page":"Table","title":"Table","text":"Table(data; box=:SIMPLE, style=\"dim bold\")","category":"page"},{"location":"ren/table/","page":"Table","title":"Table","text":"Table(data; box=:MINIMAL_DOUBLE_HEAD, style=\"dim bold green\")","category":"page"},{"location":"ren/table/#Header","page":"Table","title":"Header","text":"","category":"section"},{"location":"ren/table/","page":"Table","title":"Table","text":"You can set the header style:","category":"page"},{"location":"ren/table/","page":"Table","title":"Table","text":"Table(data; header_style=\"bold green\")","category":"page"},{"location":"ren/table/","page":"Table","title":"Table","text":"and setting each style independently","category":"page"},{"location":"ren/table/","page":"Table","title":"Table","text":"Table(data; header_style=[\"bold green\", \"dim\"])","category":"page"},{"location":"ren/table/","page":"Table","title":"Table","text":"you can also set what the header should be and if it should be left-center-right justified:","category":"page"},{"location":"ren/table/","page":"Table","title":"Table","text":"Table(data; header=[\"A\", \"B\"], header_justify=[:left, :right])","category":"page"},{"location":"ren/table/","page":"Table","title":"Table","text":"note: Note\nFor all parameters that apply to the header, columns and footer; you can either pass a single parameter or a vector of parameters. If a single parameter is passed, it will be applied to all the columns, otherwise each element of the vector is applied to each column.","category":"page"},{"location":"ren/table/#Footer","page":"Table","title":"Footer","text":"","category":"section"},{"location":"ren/table/","page":"Table","title":"Table","text":"Very similar to the header, but at the bottom:","category":"page"},{"location":"ren/table/","page":"Table","title":"Table","text":"Table(data; footer=[\"A\", \"B\"], footer_justify=[:left, :right], footer_style=\"bold green\")","category":"page"},{"location":"ren/table/","page":"Table","title":"Table","text":"a nice little thing: use functions to create a footer: Table(data; footer=sum)","category":"page"},{"location":"ren/table/#Columns","page":"Table","title":"Columns","text":"","category":"section"},{"location":"ren/table/","page":"Table","title":"Table","text":"Like for header and footer you can set the style and justification of the columns, all together or independently:","category":"page"},{"location":"ren/table/","page":"Table","title":"Table","text":"Table(data; columns_style=[\"bold green\", \"dim\"], columns_justify=[:left, :right])","category":"page"},{"location":"ren/table/","page":"Table","title":"Table","text":"but there's more (there always is, isn't it?):","category":"page"},{"location":"ren/table/","page":"Table","title":"Table","text":"import Term.Layout: PlaceHolder\nph1 = PlaceHolder(3, 12)\nph2 = PlaceHolder(5, 12)\nph3 = PlaceHolder(7, 12)\n\ndata = Dict(\n    \"first\\ncol.\" => [ph1, ph2, ph3],\n    \"second\\ncol.\" => [ph1, ph2, ph3],\n    \"third\\ncol.\" => [ph3, ph1, ph3],\n)\n\nTable(data)","category":"page"},{"location":"ren/table/","page":"Table","title":"Table","text":"and now look, vertical justify!","category":"page"},{"location":"ren/table/","page":"Table","title":"Table","text":"Table(data; vertical_justify= :bottom)","category":"page"},{"location":"ren/table/#Padding","page":"Table","title":"Padding","text":"","category":"section"},{"location":"ren/table/","page":"Table","title":"Table","text":"Finally, you can use hpad and vpad to adjust the padding of the table:","category":"page"},{"location":"ren/table/","page":"Table","title":"Table","text":"t = 1:3\ndata = hcat(t, rand(Int8, length(t)))\nTable(data; hpad=20) ","category":"page"},{"location":"ren/table/","page":"Table","title":"Table","text":"and","category":"page"},{"location":"ren/table/","page":"Table","title":"Table","text":"Table(data; vpad=5)","category":"page"},{"location":"ren/table/","page":"Table","title":"Table","text":"as you can see it changes the size of the cells around the content.","category":"page"},{"location":"ren/table/","page":"Table","title":"Table","text":"That's all you need to know about how to make a Table. You can play around with the parameters to make great looking tables!","category":"page"},{"location":"ren/table/","page":"Table","title":"Table","text":"data = Dict(\n    :Parameter => [:α, :β, :γ],\n    :Value => [1, 2, 3],\n)\n\nTable(data;\n    header_style=\"bold white on_black\",\n    header_justify=[:right, :left],\n    columns_style=[\"bold white\", \"dim\"],\n    columns_justify=[:right, :left],\n    footer=[\"\", \"{bold red}3{/bold red} params\"],\n    footer_justify=[:right, :left],\n    box=:SIMPLE,\n    style=\"#9bb3e0\"\n)","category":"page"},{"location":"api/api_logs/#Logs","page":"Logs","title":"Logs","text":"","category":"section"},{"location":"api/api_logs/","page":"Logs","title":"Logs","text":"CurrentModule = Term.Logs","category":"page"},{"location":"api/api_logs/","page":"Logs","title":"Logs","text":"Pages   = [\"api_logs.md\"]","category":"page"},{"location":"api/api_logs/","page":"Logs","title":"Logs","text":"Modules = [Logs]","category":"page"},{"location":"api/api_logs/#Term.Logs.TermLogger","page":"Logs","title":"Term.Logs.TermLogger","text":"TermLogger\n\nCustom logger type.\n\n\n\n\n\n","category":"type"},{"location":"api/api_logs/#Logging.handle_message-Tuple{Term.Logs.TermLogger, Any, Any, Any, Any, Any, Any, Any}","page":"Logs","title":"Logging.handle_message","text":"handle_message(logger::TermLogger, lvl, msg, _mod, group, id, file, line; kwargs...)\n\nHandle printing of log messages, with style!.\n\nIn addition to the log message and info such as file/line and time of log,  it prints kwargs styled by their type.\n\n\n\n\n\n","category":"method"},{"location":"api/api_logs/#Term.Logs.handle_progress-Tuple{Term.Logs.TermLogger, Any}","page":"Logs","title":"Term.Logs.handle_progress","text":"handle_progress(logger::TermLogger, prog)\n\nHandle progress information passed by ProgressLogging.\n\nIt creates/adds/removes ProgressJobs to the logger's ProgressBar to create progress visualizations. \n\n\n\n\n\n","category":"method"},{"location":"api/api_logs/#Term.Logs.install_term_logger","page":"Logs","title":"Term.Logs.install_term_logger","text":"install_term_logger(theme::Theme=theme)\n\nInstall TermLogger as the global logging system.\n\ntheme::Theme can be passed to specify the theme to use for styling objects.\n\n\n\n\n\n","category":"function"},{"location":"api/api_logs/#Term.Logs.print_closing_line","page":"Logs","title":"Term.Logs.print_closing_line","text":"print_closing_line(color::String, width::Int)\n\nPrint the final line of a log message with style and date info\n\n\n\n\n\n","category":"function"},{"location":"basics/styled_text/#Styled-text","page":"Styled text","title":"Styled text","text":"","category":"section"},{"location":"basics/styled_text/","page":"Styled text","title":"Styled text","text":"The term styled text refers to text printed out to a terminal (or other ::IO) with either color or other style (e.g., bold, italic) information. This is done by adding ANSI escape sequences in a string being printed to the terminal. These escape sequences are not rendered as characters but add the style information.","category":"page"},{"location":"basics/styled_text/#Style-macros","page":"Styled text","title":"Style macros","text":"","category":"section"},{"location":"basics/styled_text/","page":"Styled text","title":"Styled text","text":"The easiest way to add style information to a String in Term is using the dedicated macros:","category":"page"},{"location":"basics/styled_text/","page":"Styled text","title":"Styled text","text":"using Term\nprintln(@green \"this is green\")\nprintln(@blue \"and this is blue\")\nprint(\"\\n\")\nprintln(@bold \"this is bold\")\nprintln(@underline \"and this is underlined\")","category":"page"},{"location":"basics/styled_text/","page":"Styled text","title":"Styled text","text":"To color you can use these macros: @black, @red, @green, @yellow, @blue, @magenta, @cyan, @white, @default. While for styling you have: @bold @dim @italic @underline.","category":"page"},{"location":"basics/styled_text/","page":"Styled text","title":"Styled text","text":"Note that the styling macros return a string, so you can combine the resulting strings as you would normally:","category":"page"},{"location":"basics/styled_text/","page":"Styled text","title":"Styled text","text":"using Term # hide\nprintln(\n    @green(\"This is green\") * \" and \" * @red(\"this is red\")\n)\nprintln(\n    \"Make your text $(@underline(\"stand out\"))!\"\n)","category":"page"},{"location":"basics/styled_text/","page":"Styled text","title":"Styled text","text":"With these style macros you can do some simple styling, but it gets clunky when you want to go beyond adding some color. Let's say you want you text to be blue, bold and underlined; do you really need to use three macros?","category":"page"},{"location":"basics/styled_text/","page":"Styled text","title":"Styled text","text":"Of course not, you can use the @style macro!","category":"page"},{"location":"basics/styled_text/","page":"Styled text","title":"Styled text","text":"using Term # hide\nmytext = @style \"this is my text\" blue bold underline\nprintln(mytext)","category":"page"},{"location":"basics/styled_text/","page":"Styled text","title":"Styled text","text":"Like the macros you already know, @style returns a string with the desired style, except that now you can specify multiple styles at once! ","category":"page"},{"location":"basics/styled_text/#Markup-text","page":"Styled text","title":"Markup text","text":"","category":"section"},{"location":"basics/styled_text/","page":"Styled text","title":"Styled text","text":"The basic styling macros are great for handling simple cases where you just want to add a bit of style to a piece of text. More realistically, you might want more control about exactly which parts of your text have what style. ","category":"page"},{"location":"basics/styled_text/","page":"Styled text","title":"Styled text","text":"As a way of example, let's say you want every other word of yours string:","category":"page"},{"location":"basics/styled_text/","page":"Styled text","title":"Styled text","text":"str=\"Every other word has colors!\"","category":"page"},{"location":"basics/styled_text/","page":"Styled text","title":"Styled text","text":"to have a color. You could do it with macros:","category":"page"},{"location":"basics/styled_text/","page":"Styled text","title":"Styled text","text":"using Term # hide\ne = @red \"Every\"\no = \"other\"\nw = @green \"word\"\nh = \"has\"\nc = @blue \"colors!\"\n\nprint(join((e, o, w, h, c), \" \"))","category":"page"},{"location":"basics/styled_text/","page":"Styled text","title":"Styled text","text":"but that's awful. String interpolation would also not be of much help here. Instead, it would be great if we could specify styles directly inside a normal string and let Term figure it out.","category":"page"},{"location":"basics/styled_text/","page":"Styled text","title":"Styled text","text":"Well, that's exactly what we're going to do:","category":"page"},{"location":"basics/styled_text/","page":"Styled text","title":"Styled text","text":"import Term: tprint\ntprint(\n    \"{red}Every{/red} other {green}word{/green} has {blue}colors!{/blue}\"\n)","category":"page"},{"location":"basics/styled_text/","page":"Styled text","title":"Styled text","text":"Woah! What just happened!! Two things happened: 1) Term styling machinery detects strings segments like \"{red}Every{/red}\" as meaning that the text between \"{...}\" and \"{/...}\" should be colored red and 2) tprint (short for term print) detects this style information and applies it to your text before printing. ","category":"page"},{"location":"basics/styled_text/","page":"Styled text","title":"Styled text","text":"Not bad huh? Even better, the style information inside a parentheses can be more than just color:","category":"page"},{"location":"basics/styled_text/","page":"Styled text","title":"Styled text","text":"using Term # hide\ntprint(\n    \"{bold black underline on_red}So much {gold3 bold}STYLE{/gold3 bold} in this text{/bold black underline on_red}\"\n)","category":"page"},{"location":"basics/styled_text/","page":"Styled text","title":"Styled text","text":"that's right, Term.jl can also color the background of your text (by adding on_C to your color C you set it as the background, see colors page). As you can see you can pass multiple style information tags as space separated words within the \"{...}\". Also, you might have noticed, Term can also handle nested style tags!","category":"page"},{"location":"basics/styled_text/","page":"Styled text","title":"Styled text","text":"info: Where did my brackets go!?!?\nPerhaps you've tried something like tprint(\"This is {my} text\") and got surprised when the output was \"This is text\". If so, read on. What happened there is that Term.jl interprets anything with single squared parentheses ({...}) as style information and removes that from your text output. So in the example it treated {my} as a markup style tag and removed it from the text, but my is not a valid style so it was ultimately ignored. If you want to use [] in your text, you simply need to use double brackets: tprint(\"This is {{my}} text\") will print \"This is {my} text\" as expected. ","category":"page"},{"location":"basics/styled_text/","page":"Styled text","title":"Styled text","text":"If you just want to use Term.jl's style functionality, just make sure to read the admonition below. If you're curious about what's happening under the hood, read on below!","category":"page"},{"location":"basics/styled_text/","page":"Styled text","title":"Styled text","text":"warning: A note on style tags\nThe style tags used by Term.jl have an opening \"{style}\" and closing \"{/style}\" syntax. The style is applied to everything in between. For \"{/style]\" to close \"{style]\" the text in the parentheses must match exactly (excuding /), up to the number and position of spaces and the words order. So:\"{red} wohoo {/red}\"  # works\n\"{red} wohoo {/red }\" # doesn't\n\"{bold blue} wohoo {/bold blue}\" # works\n\"{bold blue} wohoo {/blue bold}\" # doesn't","category":"page"},{"location":"basics/styled_text/","page":"Styled text","title":"Styled text","text":"tip: Tip\nOccasionally you can do without the closing tag:tprint(\"{red}text\")Term.jl will add the closing tag to the end of the string for you. Generally though, when multiple styles are  applied to the same string, it's better to be explicit in exactly where each style starts and ends.","category":"page"},{"location":"basics/styled_text/#Highlighting","page":"Styled text","title":"Highlighting","text":"","category":"section"},{"location":"basics/styled_text/","page":"Styled text","title":"Styled text","text":"Term provides a highlighting functionality to automatically style text (e.g. coloring numbers, code snippets etc.) The usage is very simple","category":"page"},{"location":"basics/styled_text/","page":"Styled text","title":"Styled text","text":"import Term: load_code_and_highlight, highlight_syntax, highlight, tprint\n\ntprint(highlight(\"This text has 1 2 3 numbers, a ::Int type and a :symbol\"); highlight=false)","category":"page"},{"location":"basics/styled_text/","page":"Styled text","title":"Styled text","text":"pretty easy. Highlighting happens automatically when calling tprint:","category":"page"},{"location":"basics/styled_text/","page":"Styled text","title":"Styled text","text":"tprint(\"This text has 1 2 3 numbers, a ::Int type and a :symbol\")","category":"page"},{"location":"basics/styled_text/","page":"Styled text","title":"Styled text","text":"but you can turn it off with tprint(...; highlight=false).","category":"page"},{"location":"basics/styled_text/","page":"Styled text","title":"Styled text","text":"You can also specify how you want some text to be highlighted:","category":"page"},{"location":"basics/styled_text/","page":"Styled text","title":"Styled text","text":"tprint(highlight(\"This is just some text\", :number))  # it will be colored as number!","category":"page"},{"location":"basics/styled_text/","page":"Styled text","title":"Styled text","text":"The colors used for the highlights are specified by the Theme being used as seen a previous section. ","category":"page"},{"location":"basics/styled_text/","page":"Styled text","title":"Styled text","text":"You can also highlight syntax from code snippets (only Julia code for now):","category":"page"},{"location":"basics/styled_text/","page":"Styled text","title":"Styled text","text":"\ntprint(highlight_syntax(\"\"\"\nfunction foo(x::Int)\n    x^2\nend\n\n\"\"\"))","category":"page"},{"location":"basics/styled_text/","page":"Styled text","title":"Styled text","text":"or just load and highlight a file (showing lines in a specific range):","category":"page"},{"location":"basics/styled_text/","page":"Styled text","title":"Styled text","text":"\nload_code_and_highlight(\".../src/highlight.jl\", 125; δ=5) |> tprint","category":"page"},{"location":"basics/styled_text/#Under-the-hood","page":"Styled text","title":"Under the hood","text":"","category":"section"},{"location":"basics/styled_text/","page":"Styled text","title":"Styled text","text":"If you're reading here you're curious about what exactly is happening under the hood. So let's get started. Term.jl, like rich in python, defines a simple markup language to specify the style of bits of strings. As we saw, the syntax is very simple with an opening and closing tag specifying the style and marking the start and end of the styled text. ","category":"page"},{"location":"basics/styled_text/","page":"Styled text","title":"Styled text","text":"So the first thing that needs to happen is the detection of these markup tags. This is surprisingly hard because there are so many possible combinations. You can have markup tags whose style information varies considerably, you can have nested tags, you can have tags spread across lines and you can have nested tags spread across lines:","category":"page"},{"location":"basics/styled_text/","page":"Styled text","title":"Styled text","text":"using Term # hide\ntprint(\n    \"\"\"\nAnd {blue} somehow\nit {bold red} all {/bold red}\nhas to {green underline} always\nwork {/green underline} correctly {/blue}\nsomehow.\n    \"\"\"\n)","category":"page"},{"location":"basics/styled_text/","page":"Styled text","title":"Styled text","text":"CurrentModule = Term.Style","category":"page"},{"location":"basics/styled_text/","page":"Styled text","title":"Styled text","text":"All of this is taken care of by Term.Style.apply_style which extracts markup style information from your strings and replaces them with the appropriate ANSI escape codes. This is done by parsing the markup information (the text bewteen {...}) into a Term.Style.MarkupStyle object which stores the style information. Finally, get_style_codes get the ANSI codes corresponding to the required style.  So in summary:","category":"page"},{"location":"basics/styled_text/","page":"Styled text","title":"Styled text","text":"apply_style(\"{red}text{/red}\")","category":"page"},{"location":"basics/styled_text/","page":"Styled text","title":"Styled text","text":"will return a string with style information","category":"page"},{"location":"basics/styled_text/","page":"Styled text","title":"Styled text","text":"import Term.Style: apply_style  # hide\napply_style(\"{red}text{/red}\") # hide","category":"page"},{"location":"basics/styled_text/","page":"Styled text","title":"Styled text","text":"which printed to the console looks like:","category":"page"},{"location":"basics/styled_text/","page":"Styled text","title":"Styled text","text":"import Term.Style: apply_style  # hide\nprint(apply_style(\"{red}text{/red}\")) # hide","category":"page"},{"location":"layout/justify/#Justify","page":"Justify","title":"Justify","text":"","category":"section"},{"location":"layout/justify/","page":"Justify","title":"Justify","text":"We've seen that you can vertically stack renderables:","category":"page"},{"location":"layout/justify/","page":"Justify","title":"Justify","text":"using Term\nusing Term.Layout\n\np1 = Panel(height=3, width=20)\np2 = Panel(height=3, width=40)\np3 = Panel(height=3, width=60)\nvstack(p1, p2, p3;)","category":"page"},{"location":"layout/justify/","page":"Justify","title":"Justify","text":"but when the renderables have unequal lengths they all get pushed to the left. This might not be what you want, so you can use the justify function to align them:","category":"page"},{"location":"layout/justify/","page":"Justify","title":"Justify","text":"\ncenter!(p1, p2, p3;)  # there's also the non-modifying `center\nvstack(p1, p2, p3;)","category":"page"},{"location":"layout/justify/","page":"Justify","title":"Justify","text":"calling center!(p1, p3;) modifies the two renderables to ensure that they have the same width by padding to the left and right so that they're centered. You can also use rightalign! and leftalign! to align them to the right or left respectively too.","category":"page"},{"location":"layout/justify/","page":"Justify","title":"Justify","text":"Admittedly, this is nice but the syntax is a bit clunky. But don't worry of course we provide a shorthand notation to stack and justify in one fell swoop (because why would you justify if you're not stacking):","category":"page"},{"location":"layout/justify/","page":"Justify","title":"Justify","text":"p1 = Panel(height=3, width=20)\np2 = Panel(height=3, width=40)\np3 = Panel(height=3, width=60)\n\nrvstack(p1, p2, p3;)","category":"page"},{"location":"layout/justify/","page":"Justify","title":"Justify","text":"rvstack justifies to the right and vertically stacks renderables. Guess what cvstack and lvstack do?","category":"page"},{"location":"basics/tprint/#tprint","page":"tprint","title":"tprint","text":"","category":"section"},{"location":"basics/tprint/","page":"tprint","title":"tprint","text":"We've seen tprint before. When passed a string with markup information it will print it with the correct style.","category":"page"},{"location":"basics/tprint/","page":"tprint","title":"tprint","text":"import Term: tprint\ntprint(\"This text has {bold gold1 underline}style!\")","category":"page"},{"location":"basics/tprint/","page":"tprint","title":"tprint","text":"But there's more. Compare Base.print with Term.tprint here:","category":"page"},{"location":"basics/tprint/","page":"tprint","title":"tprint","text":"print(\"This is a: \", 1, \"of type\", typeof(1), \"this is a function\", print)\nprint(\"\\n\") # hide\ntprint(\"This is a: \", 1, \"of type\", typeof(1), \"this is a function\", print)","category":"page"},{"location":"basics/tprint/","page":"tprint","title":"tprint","text":"you can see two differences. The first is that when passing multiple comma separated arguments tprint inserts a space between them, making the output easier to parse. The second is that it colors certain objects types (Number, DataType and Function in the example). Thus any number will be printed blue, function names will be yellow etc.","category":"page"},{"location":"basics/tprint/","page":"tprint","title":"tprint","text":"In addition, tprint will automatically highlight numbers, types etc... in your strings.","category":"page"},{"location":"basics/tprint/","page":"tprint","title":"tprint","text":"tprint(\"This is a: 1 of type ::Int64 this is a function `print`\")","category":"page"},{"location":"basics/tprint/","page":"tprint","title":"tprint","text":"info: highlighting\nBy default tprint highlights strings before printing them out. If you don't like that, set tprint(...; highlight=false)! Also, if your text already has markup or ANSI style information, it won't be highlighted: highlighting styled text get messy!","category":"page"},{"location":"basics/tprint/","page":"tprint","title":"tprint","text":"Tprint can also print renderables, of course.","category":"page"},{"location":"basics/tprint/","page":"tprint","title":"tprint","text":"using Term # hide\ntprint(Panel(; width=22, height=2), Panel(; width=22, height=3))","category":"page"},{"location":"basics/tprint/","page":"tprint","title":"tprint","text":"As you can see the renderables are printed one above the other. ","category":"page"},{"location":"basics/tprint/","page":"tprint","title":"tprint","text":"Finally, you should know that like print has println, so tprint has tprintln to add a new line to the output.","category":"page"},{"location":"basics/tprint/","page":"tprint","title":"tprint","text":"With this we conclude our overview of the basic elements of Term: markup style to create styled text, tprint to print it to console, renderables like Panel and TextBox and the layout syntax to create beautiful terminal output.  There's a lot more you can use Term for, but styled text, panels and layout operators will get you far! Enjoy!","category":"page"},{"location":"api/api_measures/#Measures","page":"Measures","title":"Measures","text":"","category":"section"},{"location":"api/api_measures/","page":"Measures","title":"Measures","text":"CurrentModule = Term.Measures","category":"page"},{"location":"api/api_measures/","page":"Measures","title":"Measures","text":"Pages   = [\"api_measures.md\"]","category":"page"},{"location":"api/api_measures/","page":"Measures","title":"Measures","text":"Modules = [Measures]","category":"page"},{"location":"api/api_measures/#Term.Measures.Measure","page":"Measures","title":"Term.Measures.Measure","text":"Measure\n\nStores the size of a piece of renderable material.\n\n\n\n\n\n","category":"type"},{"location":"api/api_measures/#Term.Measures.Measure-Tuple{AbstractString}","page":"Measures","title":"Term.Measures.Measure","text":"Measure(str::String)\n\nConstructs a measure object from a string\n\n\n\n\n\n","category":"method"},{"location":"api/api_measures/#Base.:+-Tuple{Term.Measures.Measure, Term.Measures.Measure}","page":"Measures","title":"Base.:+","text":"The sum of measures returns a measure with the highest value along each dimension.\n\n\n\n\n\n","category":"method"},{"location":"api/api_measures/#Term.Measures.default_size-Tuple{}","page":"Measures","title":"Term.Measures.default_size","text":"default_size()\n\nReturns default size (h, w).\n\n\n\n\n\n","category":"method"},{"location":"api/api_measures/#Term.Measures.height-Tuple{Any}","page":"Measures","title":"Term.Measures.height","text":"height\n\nMeasure the height of renderable objects (text, AbsstractRenderable).\n\n\n\n\n\n","category":"method"},{"location":"api/api_measures/#Term.Measures.width-Tuple{Any}","page":"Measures","title":"Term.Measures.width","text":"width\n\nMeasure the width of renderable objects (text, AbsstractRenderable).\n\n\n\n\n\n","category":"method"},{"location":"api/api_repr/#REPR","page":"REPR","title":"REPR","text":"","category":"section"},{"location":"api/api_repr/","page":"REPR","title":"REPR","text":"CurrentModule = Term.Repr","category":"page"},{"location":"api/api_repr/","page":"REPR","title":"REPR","text":"Pages   = [\"api_repr.md\"]","category":"page"},{"location":"api/api_repr/","page":"REPR","title":"REPR","text":"Modules = [Repr]","category":"page"},{"location":"api/api_repr/#Term.Repr.get_docstring-Tuple{Any}","page":"REPR","title":"Term.Repr.get_docstring","text":"get_docstring(obj)\n\nExtract and style an object's docstring.\n\n\n\n\n\n","category":"method"},{"location":"api/api_repr/#Term.Repr.install_term_repr-Tuple{}","page":"REPR","title":"Term.Repr.install_term_repr","text":"install_term_repr()\n\nMake term_show be called every times something is shown in the REPL\n\n\n\n\n\n","category":"method"},{"location":"api/api_repr/#Term.Repr.style_function_methods-Tuple{Any, String}","page":"REPR","title":"Term.Repr.style_function_methods","text":"Create a styled list of methods for a function. Accepts string(methods(function)) as argument.\n\n\n\n\n\n","category":"method"},{"location":"api/api_repr/#Term.Repr.style_methods-Tuple{Union{Base.MethodList, Vector{Method}}, AbstractString}","page":"REPR","title":"Term.Repr.style_methods","text":"style_methods(methods::Union{Vector{Base.Method}, Base.MethodList}, tohighlight::AbstractString)\n\nCreate a Renderable with styled Method information for inspect(::DataType)\n\n\n\n\n\n","category":"method"},{"location":"api/api_repr/#Term.Repr.termshow","page":"REPR","title":"Term.Repr.termshow","text":"termshow\n\nStyled string representation of any object.\n\ntermshow prints to stdout (or any other IO) a styled representation of the object. Dedicated methods create displays for specify types such as Dict or Vector.\n\n\n\n\n\n","category":"function"},{"location":"api/api_repr/#Term.Repr.termshow-Tuple{IO, AbstractArray}","page":"REPR","title":"Term.Repr.termshow","text":"\n\ntermshow(io::IO, arr::AbstractArray; kwargs...)\n\nShow the content of a multidimensional array as a series of 2D slices.\n\n\n\n\n\n","category":"method"},{"location":"api/api_repr/#Term.Repr.termshow-Tuple{IO, AbstractDict}","page":"REPR","title":"Term.Repr.termshow","text":"\n\ntermshow(io::IO, d::Dict; kwargs...)\n\nShow a dictionary's keys and values and their data types.\n\n\n\n\n\n","category":"method"},{"location":"api/api_repr/#Term.Repr.termshow-Tuple{IO, AbstractMatrix}","page":"REPR","title":"Term.Repr.termshow","text":"\n\ntermshow(io::IO, mtx::AbstractMatrix; kwargs...)\n\nShow a matrix content as a 2D table visualization.\n\n\n\n\n\n","category":"method"},{"location":"api/api_repr/#Term.Repr.termshow-Tuple{IO, Any}","page":"REPR","title":"Term.Repr.termshow","text":"\n\ntermshow(io::IO, obj)\n\nGeneric method for any object not caught my dedicated methods. Creates a Panel with the object's fields and contents.\n\n\n\n\n\n","category":"method"},{"location":"api/api_repr/#Term.Repr.termshow-Tuple{IO, DataType}","page":"REPR","title":"Term.Repr.termshow","text":"\n\ntermshow(io::IO, obj::DataType; kwargs...)\n\nShow a type's arguments, constructors and docstring.\n\n\n\n\n\n","category":"method"},{"location":"api/api_repr/#Term.Repr.termshow-Tuple{IO, Expr}","page":"REPR","title":"Term.Repr.termshow","text":"\n\ntermshow(io::IO, e::Expr; kwargs...)\n\nShow an expression's head and arguments.\n\n\n\n\n\n","category":"method"},{"location":"api/api_repr/#Term.Repr.termshow-Tuple{IO, Function}","page":"REPR","title":"Term.Repr.termshow","text":"\n\ntermshow(io::IO, fun::Function; kwargs...)\n\nShow a function's methods and docstring.\n\n\n\n\n\n","category":"method"},{"location":"api/api_repr/#Term.Repr.termshow-Tuple{IO, Union{Tuple, AbstractVector}}","page":"REPR","title":"Term.Repr.termshow","text":"\n\ntermshow(io::IO, vec::Union{Tuple,AbstractVector}; kwargs...)\n\nShow a vector's content as a 1D table visualization.\n\n\n\n\n\n","category":"method"},{"location":"api/api_repr/#Term.Repr.typename-Tuple{Expr}","page":"REPR","title":"Term.Repr.typename","text":"typename(typedef::Expr)\n\nGet the name of a type as an expression\n\n\n\n\n\n","category":"method"},{"location":"api/api_repr/#Term.Repr.with_repr-Tuple{Expr}","page":"REPR","title":"Term.Repr.with_repr","text":"with_repr(typedef::Expr)\n\nFunction for the macro @with_repr which creates a Base.show method for a type.\n\nThe show method shows the field names/types for the  type and the values of the fields.\n\nExample\n\n@with_repr struct TestStruct2\n    x::Int\n    name::String\n    y\nend\n\n\n\n\n\n","category":"method"},{"location":"api/api_repr/#Term.Repr.@with_repr-Tuple{Expr}","page":"REPR","title":"Term.Repr.@with_repr","text":"with_repr(typedef::Expr)\n\nFunction for the macro @with_repr which creates a Base.show method for a type.\n\nThe show method shows the field names/types for the  type and the values of the fields.\n\nExample\n\n@with_repr struct TestStruct2\nx::Int\nname::String\ny\nend\n\n\n\n\n\n","category":"macro"},{"location":"api/api_term/#Term","page":"Term","title":"Term","text":"","category":"section"},{"location":"api/api_term/","page":"Term","title":"Term","text":"CurrentModule = Term","category":"page"},{"location":"api/api_term/","page":"Term","title":"Term","text":"Pages   = [\"api_term.md\"]","category":"page"},{"location":"api/api_term/","page":"Term","title":"Term","text":"Modules = [Term]","category":"page"},{"location":"api/api_term/#Term.Term","page":"Term","title":"Term.Term","text":"Term.jl\n\nWelcome to Term.jl! Term.jl is a Julia library for producing styled, beautiful terminal output.\n\nDocumentation\n\nSee https://fedeclaudi.github.io/Term.jl for documentation.\n\nDemonstration\n\nusing Term\nconst term_demo = joinpath(dirname(pathof(Term)), \"..\", \"README.jl\")\ninclude(term_demo) # view demo\nless(term_demo) # see demo code\n\nExample\n\nbegin\n    println(@green \"this is green\")\n    println(@blue \"and this is blue\")\n    println()\n    println(@bold \"this is bold\")\n    println(@underline \"and this is underlined\")\nend\n\n\n\n\n\n","category":"module"},{"location":"api/api_term/#Term.OPEN_TAG_REGEX","page":"Term","title":"Term.OPEN_TAG_REGEX","text":"This regex uses lookahead and lookbehind to exclude {{ at the beginning of a tag, with this:     (?<!{)[(?!{)\n\n\n\n\n\n","category":"constant"},{"location":"api/api_term/#Term.CodeTheme","page":"Term","title":"Term.CodeTheme","text":"Custom hilighting theme for Highlighters.jl https://juliadocs.github.io/Highlights.jl/stable/man/theme/\n\n\n\n\n\n","category":"type"},{"location":"api/api_term/#Term.Measures.Measure-Tuple{AbstractVector}","page":"Term","title":"Term.Measures.Measure","text":"Measure(segments::AbstractVector)\n\ngives the measure of a vector of segments\n\n\n\n\n\n","category":"method"},{"location":"api/api_term/#Term.Measures.Measure-Tuple{Term.Segments.Segment}","page":"Term","title":"Term.Measures.Measure","text":"Measure(seg::Segment)\n\ngives the measure of a segment\n\n\n\n\n\n","category":"method"},{"location":"api/api_term/#Term.Theme","page":"Term","title":"Term.Theme","text":"Theme\n\nStores colors for different semantically relevant items, used to  style outputs to terminal.\n\n\n\n\n\n","category":"type"},{"location":"api/api_term/#Highlights.Format.render-Tuple{IO, MIME{Symbol(\"text/ansi\")}, Highlights.Format.TokenIterator}","page":"Term","title":"Highlights.Format.render","text":"Format.render(io::IO, ::MIME\"text/ansi\", tokens::Format.TokenIterator)\n\ncustom ANSI lexer for Highlighters.jl\n\n\n\n\n\n","category":"method"},{"location":"api/api_term/#Term.calc_nrows_ncols","page":"Term","title":"Term.calc_nrows_ncols","text":"calc_nrows_ncols(n, aspect::Union{Nothing,Number,NTuple} = nothing)\n\nComputes the number of rows and columns to fit a given number n of subplots in a figure with aspect aspect. If aspect is nothing, chooses the best fir between a default and a unit aspect ratios.\n\nAdapted from: stackoverflow.com/a/43366784\n\n\n\n\n\n","category":"function"},{"location":"api/api_term/#Term.characters-Tuple{Any}","page":"Term","title":"Term.characters","text":"characters(word)\n\nGet individual characters in a word, their position and size.\n\n\n\n\n\n","category":"method"},{"location":"api/api_term/#Term.chars-Tuple{AbstractString}","page":"Term","title":"Term.chars","text":"Split a string into a vector of Chars.\n\n\n\n\n\n","category":"method"},{"location":"api/api_term/#Term.cleantext-Tuple{Any}","page":"Term","title":"Term.cleantext","text":"cleantext(str::AbstractString)\n\nRemove all style information from a string.\n\n\n\n\n\n","category":"method"},{"location":"api/api_term/#Term.do_by_line-Tuple{Function, Any}","page":"Term","title":"Term.do_by_line","text":"do_by_line(fn::Function, text::String)\n\nApply fn to each line in the text.\n\nThe function fn should accept a single ::String argument.\n\n\n\n\n\n","category":"method"},{"location":"api/api_term/#Term.escape_brackets-Tuple{Any}","page":"Term","title":"Term.escape_brackets","text":"escape_brackets(text)::Stringremove_ansi(str)::String\n\nReplace each curly bracket with a double copy of itself\n\n\n\n\n\n","category":"method"},{"location":"api/api_term/#Term.expr2string-Tuple{Expr}","page":"Term","title":"Term.expr2string","text":"Get a clean string representation of an expression\n\n\n\n\n\n","category":"method"},{"location":"api/api_term/#Term.fillin-Tuple{Any}","page":"Term","title":"Term.fillin","text":"fillin(text::String)::String\n\nEnsure that each line in a multi-line text has the same width.\n\n\n\n\n\n","category":"method"},{"location":"api/api_term/#Term.get_ANSI_codes-Tuple{Any}","page":"Term","title":"Term.get_ANSI_codes","text":"get_ANSI_codes(text)::String\n\nReturns a string with all ANSI codes in the input.\n\n\n\n\n\n","category":"method"},{"location":"api/api_term/#Term.get_bg_color-Tuple{String}","page":"Term","title":"Term.get_bg_color","text":"get_bg_color(style::String)\n\nAdd \"on_\" to background style info.\n\n\n\n\n\n","category":"method"},{"location":"api/api_term/#Term.get_file_format-Tuple{Any}","page":"Term","title":"Term.get_file_format","text":"getfileformat(nbytes; suffix=\"B\")\n\nReturn a string with formatted file size.\n\n\n\n\n\n","category":"method"},{"location":"api/api_term/#Term.get_last_ANSI_code-Tuple{Any}","page":"Term","title":"Term.get_last_ANSI_code","text":"get_last_ANSI_code(text)::String\n\nGet the last ANSI code in a sting, returns \"\" if no ANSI code found.\n\n\n\n\n\n","category":"method"},{"location":"api/api_term/#Term.get_lr_widths-Tuple{Int64}","page":"Term","title":"Term.get_lr_widths","text":"getlrwidths(width::Int)\n\nTo split something with width in 2, get the lengths of the left/right widths.\n\nWhen width is even that's easy, when it's odd we need to be careful.\n\n\n\n\n\n","category":"method"},{"location":"api/api_term/#Term.has_ansi-Tuple{Any}","page":"Term","title":"Term.has_ansi","text":"has_ansi(text::String)\n\nReturns true if text includes a MarkupTag\n\n\n\n\n\n","category":"method"},{"location":"api/api_term/#Term.has_markup-Tuple{Any}","page":"Term","title":"Term.has_markup","text":"has_markup(text::String)\n\nReturns true if text includes a MarkupTag\n\n\n\n\n\n","category":"method"},{"location":"api/api_term/#Term.highlight-Tuple{AbstractString, Symbol}","page":"Term","title":"Term.highlight","text":"highlight(text::AbstractString, theme::Theme, like::Symbol)\n\nHilights an entire text as if it was a type of semantically relevant text of type :like.\n\n\n\n\n\n","category":"method"},{"location":"api/api_term/#Term.highlight-Tuple{AbstractString}","page":"Term","title":"Term.highlight","text":"highlight(text::AbstractString, theme::Theme)\n\nHighlighs a text introducing markup to style semantically relevant segments, colors specified by a theme object.\n\n\n\n\n\n","category":"method"},{"location":"api/api_term/#Term.highlight_syntax-Tuple{AbstractString}","page":"Term","title":"Term.highlight_syntax","text":"highlight_syntax(code::AbstractString; style::Bool=true)\n\nHighlight Julia code syntax in a string.\n\n\n\n\n\n","category":"method"},{"location":"api/api_term/#Term.join_lines-Tuple{Vector{String}}","page":"Term","title":"Term.join_lines","text":"join_lines(lines)\n\nMerge a vector of strings in a single string.\n\n\n\n\n\n","category":"method"},{"location":"api/api_term/#Term.justify-Tuple{AbstractString, Int64}","page":"Term","title":"Term.justify","text":"justify(text::AbstractString, width::Int)::String\n\nJustify a piece of text spreading out text to fill in a given width.\n\n\n\n\n\n","category":"method"},{"location":"api/api_term/#Term.load_code_and_highlight-Tuple{AbstractString, Int64}","page":"Term","title":"Term.load_code_and_highlight","text":"load_code_and_highlight(path::AbstractString, lineno::Int; δ::Int=3, width::INt=120)\n\nLoad a file, get the code and format it. Return styled text\n\n\n\n\n\n","category":"method"},{"location":"api/api_term/#Term.loop_last-Tuple{Any}","page":"Term","title":"Term.loop_last","text":"loop_last(v)\n\nReturns an iterable yielding tuples (is_last, value).\n\n\n\n\n\n","category":"method"},{"location":"api/api_term/#Term.ltrim_str-Tuple{Any, Any}","page":"Term","title":"Term.ltrim_str","text":"ltrim_str(str, width)\n\nCut a chunk of width width form the left of a string\n\n\n\n\n\n","category":"method"},{"location":"api/api_term/#Term.nospaces-Tuple{AbstractString}","page":"Term","title":"Term.nospaces","text":"nospaces(text::AbstractString)\n\nRemove all spaces from a string.\n\n\n\n\n\n","category":"method"},{"location":"api/api_term/#Term.read_file_lines-Tuple{AbstractString, Int64, Int64}","page":"Term","title":"Term.read_file_lines","text":"read_file_lines(path::String, start::Int, stop::Int)\n\nRead a file and select only lines in range start -> stop.\n\nReturns a vector of tuples with the line number and line content.\n\n\n\n\n\n","category":"method"},{"location":"api/api_term/#Term.remove_ansi-Tuple{Any}","page":"Term","title":"Term.remove_ansi","text":"remove_ansi(input_text::AbstractString)::AbstractString\n\nRemove all ANSI tags from a string of text\n\n\n\n\n\n","category":"method"},{"location":"api/api_term/#Term.remove_brackets-Tuple{Any}","page":"Term","title":"Term.remove_brackets","text":"remove_brackets(text::AbstractString)\n\nRemove all () brackets from a string.\n\n\n\n\n\n","category":"method"},{"location":"api/api_term/#Term.remove_markup-Tuple{Any}","page":"Term","title":"Term.remove_markup","text":"remove_markup(input_text::AbstractString)::AbstractString\n\nRemove all markup tags from a string of text.\n\n\n\n\n\n","category":"method"},{"location":"api/api_term/#Term.replace_ansi-Tuple{Any}","page":"Term","title":"Term.replace_ansi","text":"replace_ansi(input_text)\n\nReplace ANSI tags with ¦.\n\nThe number of '¦' matches the length of the ANSI tags. Used when we want to hide ANSI tags but keep the string length intact.\n\n\n\n\n\n","category":"method"},{"location":"api/api_term/#Term.replace_multi-Tuple{Any, Vararg{Any}}","page":"Term","title":"Term.replace_multi","text":"multiple strings replacement.\n\n\n\n\n\n","category":"method"},{"location":"api/api_term/#Term.replace_text","page":"Term","title":"Term.replace_text","text":"replace_text(text::AbstractString, start::Int, stop::Int, char::Char='_')\n\nReplace a section of a text  between start and stop with another string composed of repeats of a given character char.\n\n\n\n\n\n","category":"function"},{"location":"api/api_term/#Term.replace_text-Tuple{Any, Int64, Int64, String}","page":"Term","title":"Term.replace_text","text":"replace_text(text::AbstractString, start::Int, stop::Int, replace::AbstractString)\n\nReplace a section of a text between start and stop with replace.\n\n\n\n\n\n","category":"method"},{"location":"api/api_term/#Term.reshape_text-Tuple{AbstractString, Int64}","page":"Term","title":"Term.reshape_text","text":"reshape_text(text::AbstractString, width::Int)\n\nReshape a text to have a given width. \n\nInsert newline characters in a string so that each line is within the given width.\n\n\n\n\n\n","category":"method"},{"location":"api/api_term/#Term.rtrim_str-Tuple{Any, Any}","page":"Term","title":"Term.rtrim_str","text":"rtrim_str(str, width)\n\nCut a chunk of width width form the right of a string\n\n\n\n\n\n","category":"method"},{"location":"api/api_term/#Term.split_lines-Tuple{String}","page":"Term","title":"Term.split_lines","text":"split_lines(text::AbstractString)\n\nSplit a string into its composing lines.\n\n\n\n\n\n","category":"method"},{"location":"api/api_term/#Term.split_tags_into_words-Tuple{Any}","page":"Term","title":"Term.split_tags_into_words","text":"split_tags_into_words(text)\n\nSplit markup tags with multiple words  into multiple tags with a single word each.\n\n\n\n\n\n","category":"method"},{"location":"api/api_term/#Term.str_trunc-Tuple{AbstractString, Int64}","page":"Term","title":"Term.str_trunc","text":"str_trunc(text::AbstractString, width::Int)\n\nShorten a string of text to a target width\n\n\n\n\n\n","category":"method"},{"location":"api/api_term/#Term.style_at_each_line-Tuple{Any}","page":"Term","title":"Term.style_at_each_line","text":"style_at_each_line(text)\n\nGet style tags over multiple lines and repeat them at the start/end of each line.\n\n\n\n\n\n","category":"method"},{"location":"api/api_term/#Term.text_to_width-Tuple{AbstractString, Int64, Symbol}","page":"Term","title":"Term.text_to_width","text":"text_to_width(text::AbstractString, width::Int)::String\n\nCast a text to have a given width by reshaping, it and padding. It includes an option to justify the text (:left, :right, :center, :justify).\n\n\n\n\n\n","category":"method"},{"location":"api/api_term/#Term.textlen-Tuple{String}","page":"Term","title":"Term.textlen","text":"textlen(x::AbstractString)\n\nGet length of text after all style information is removed.\n\n\n\n\n\n","category":"method"},{"location":"api/api_term/#Term.tview-Tuple{Any, Int64, Int64}","page":"Term","title":"Term.tview","text":"tview(text, start::Int, stop::Int)\n\nGet a view object with appropriate indices\n\n\n\n\n\n","category":"method"},{"location":"api/api_term/#Term.unescape_brackets-Tuple{Any}","page":"Term","title":"Term.unescape_brackets","text":"unescape_brackets(text)::String\n\nReplece every double squared parenthesis with a single copy of itself\n\n\n\n\n\n","category":"method"},{"location":"api/api_term/#Term.unspace_commas-Tuple{Any}","page":"Term","title":"Term.unspace_commas","text":"unspace_commas(text::AbstractString)\n\nRemove spaces after commas.\n\n\n\n\n\n","category":"method"},{"location":"api/api_term/#Term.words-Tuple{Any}","page":"Term","title":"Term.words","text":"words(text)\n\nGet individual words in a string, their position and size.\n\n\n\n\n\n","category":"method"},{"location":"api/api_term/#Term.@make_color_macro-Tuple{Any}","page":"Term","title":"Term.@make_color_macro","text":"Macro to create macros such as @green which colors text accordingly\n\n\n\n\n\n","category":"macro"},{"location":"api/api_term/#Term.@make_mode_macro-Tuple{Any}","page":"Term","title":"Term.@make_mode_macro","text":"Macro to create macros such as @underline which styles text accordingly.\n\n\n\n\n\n","category":"macro"},{"location":"api/api_term/#Term.@style-Tuple{Any, Vararg{Any}}","page":"Term","title":"Term.@style","text":"@style \"text\" style1 style2...\n\nApplies a sequence of styles to a piece of text, such that\n\nprintln(@style \"my text\" bold green underline)\n\nwill print my text as bold, green and underlined\n\n\n\n\n\n","category":"macro"},{"location":"api/api_grid/#Grid","page":"Grid","title":"Grid","text":"","category":"section"},{"location":"api/api_grid/","page":"Grid","title":"Grid","text":"CurrentModule = Term.Grid","category":"page"},{"location":"api/api_grid/","page":"Grid","title":"Grid","text":"Pages   = [\"api_grid.md\"]","category":"page"},{"location":"api/api_grid/","page":"Grid","title":"Grid","text":"Modules = [Grid]","category":"page"},{"location":"api/api_grid/#Term.Grid","page":"Grid","title":"Term.Grid","text":"Author(s): T Bltg (github.com/t-bltg)\n\n\n\n\n\n","category":"module"},{"location":"api/api_grid/#Term.Grid.collect_elements-Tuple{Expr}","page":"Grid","title":"Term.Grid.collect_elements","text":"collect_elements(ex::Expr)\n\nCollects elements (individual LayoutElements) that are in a layout expresssion.\n\n\n\n\n\n","category":"method"},{"location":"api/api_grid/#Term.Grid.extract_renderable_from_kwargs-Tuple{Any, Any, Any}","page":"Grid","title":"Term.Grid.extract_renderable_from_kwargs","text":"extract_renderable_from_kwargs(s, h, w; kwargs...)\n\nWhen passing kwargs to a Compositor, check for renderables that are  to be assigned to its content.\n\n\n\n\n\n","category":"method"},{"location":"api/api_grid/#Term.Grid.get_elements_and_sizes-Tuple{Expr}","page":"Grid","title":"Term.Grid.get_elements_and_sizes","text":"get_elements_and_sizes(ex::Expr)\n\nGet elements names and sizes.\n\n\n\n\n\n","category":"method"},{"location":"api/api_grid/#Term.Grid.grid","page":"Grid","title":"Term.Grid.grid","text":"grid(\n    rens::Nothing = nothing;\n    placeholder_size::Union{Nothing,Tuple} = nothing,\n    layout::Union{Nothing,Tuple,Expr} = nothing,\n    kw...\n)\n\nConstruct a grid of PlaceHolders, for a given layout.\n\n\n\n\n\n","category":"function"},{"location":"api/api_grid/#Term.Grid.grid-Tuple{AbstractMatrix}","page":"Grid","title":"Term.Grid.grid","text":"grid(rens::AbstractMatrix; pad::Union{Tuple,Integer} = 0))\n\nConstruct a grid from an AbstractMatrix.\n\n\n\n\n\n","category":"method"},{"location":"api/api_grid/#Term.Grid.grid-Tuple{Union{Tuple, AbstractVector, NamedTuple}}","page":"Grid","title":"Term.Grid.grid","text":"grid(\n    rens::Union{AbstractVector,Tuple,NamedTuple};\n    placeholder::Union{Nothing,AbstractRenderable} = nothing,\n    placeholder_size::Union{Nothing,Tuple} = nothing,\n    aspect::Union{Nothing,Number,NTuple} = nothing,\n    layout::Union{Nothing,Tuple,Expr} = nothing,\n    show_placeholder::Bool = false,\n    pad::Union{Tuple,Integer} = 0,\n    order::Symbol = :row,\n)\n\nDescription\n\nConstruct a grid from an iterable (AbstractVector, Tuple, NamedTuple).\n\nLays out the renderables to create a grid with the desired aspect ratio or layout (number of rows, number of columns, or one left free with nothing). Complex layout is supported using compositor expressions.\n\nArguments\n\nplaceholder: placeholder for empty grid components. placeholder_size: size of the auto-placeholder. aspect: target grid aspect ratio. layout: tuple (rows, cols) final size or complex expression. show_placeholder: display/hide placeholder(s). pad: additional padding between layout components. order: :row for row major input iteration (default) or :col for column major.\n\n\n\n\n\n","category":"method"},{"location":"api/api_grid/#Term.Grid.parse_single_element_layout-Tuple{Expr}","page":"Grid","title":"Term.Grid.parse_single_element_layout","text":"parse_single_element_layout(ex::Expr)\n\nParse an expression with a single layout element, like :(A(5, 25)) or :(A)\n\n\n\n\n\n","category":"method"},{"location":"api/api_errors/#Errors","page":"Errors","title":"Errors","text":"","category":"section"},{"location":"api/api_errors/","page":"Errors","title":"Errors","text":"CurrentModule = Term.Errors","category":"page"},{"location":"api/api_errors/","page":"Errors","title":"Errors","text":"Pages   = [\"api_errors.md\"]","category":"page"},{"location":"api/api_errors/","page":"Errors","title":"Errors","text":"Modules = [Errors]","category":"page"},{"location":"layout/compositor/#Compositor","page":"Compositor","title":"Compositor","text":"","category":"section"},{"location":"layout/compositor/","page":"Compositor","title":"Compositor","text":"We've just seen how you can use grid to achieve nice layouts very easily. That's great when you have a bunch of renderables of the same size and you want to crate a simple layout. If you want to get fancy using grid is not trivial:","category":"page"},{"location":"layout/compositor/","page":"Compositor","title":"Compositor","text":"using Term: Panel\nusing Term.Layout\nimport Term.Grid: grid\n\nplarge = Panel(height=10, width=60)\npsmall = Panel(height=10, width=20)\npanels = repeat([psmall], 3)\n\nplarge / grid(panels, layout=(1, 3))","category":"page"},{"location":"layout/compositor/","page":"Compositor","title":"Compositor","text":"you can do it, of course, but the more complex you get the harder it is to handle. You could also use the normal stacking syntax of course:","category":"page"},{"location":"layout/compositor/","page":"Compositor","title":"Compositor","text":"plarge / hstack(panels...)","category":"page"},{"location":"layout/compositor/","page":"Compositor","title":"Compositor","text":"but again you suffer from the same problem if you want to create something like, say, this:","category":"page"},{"location":"layout/compositor/","page":"Compositor","title":"Compositor","text":"using Term.Compositors # hide\nimport Term.Compositors: update! # hide\nlayout = :(vstack(  # hide\n            A(5, 40), B(5, 40),  # hide\n            hstack(C(5, 18), D(5, 18); pad=4); pad=1 # hide\n        ) # hide\n        * E(20, 5) * vstack( # hide\n            F(5, 40), G(5, 40),  # hide\n            hstack(H(5, 18), I(5, 18); pad=4); pad=1 # hide\n        ) / O(5, 85) # hide\n) # hide\n\nCompositor(layout) # hide","category":"page"},{"location":"layout/compositor/","page":"Compositor","title":"Compositor","text":"that's a total of 10 place holders in a complex layout... surely it must be a pain right?","category":"page"},{"location":"layout/compositor/","page":"Compositor","title":"Compositor","text":"Nope, not if you use Compsitor. \"What is Compositor?\" I hear you ask - well let me tell you. ","category":"page"},{"location":"layout/compositor/","page":"Compositor","title":"Compositor","text":"The idea is that you create the layout you care about using an Expression like this:","category":"page"},{"location":"layout/compositor/","page":"Compositor","title":"Compositor","text":"\nlayout = :(A(5, 45) * B(5, 45))","category":"page"},{"location":"layout/compositor/","page":"Compositor","title":"Compositor","text":"There A and B will be two place holders for renderables that make up the layout. The (5, 45) specify the size of the place holders and * is the usual stacking operator.  Give this expression to the Compositor and magic happens","category":"page"},{"location":"layout/compositor/","page":"Compositor","title":"Compositor","text":"using Term.Compositors\n\nCompositor(layout)","category":"page"},{"location":"layout/compositor/","page":"Compositor","title":"Compositor","text":"Compositor parses the expression, creates the place holders and then creates the layout. You just sit back and relax!.","category":"page"},{"location":"layout/compositor/","page":"Compositor","title":"Compositor","text":"Now, you have a lot of freedom of what goes into the expression, but you need to respect the rule that renderables are specified by a single character name and a size. Other than that, go crazy and use all the syntax for stacking renderables you like!","category":"page"},{"location":"layout/compositor/","page":"Compositor","title":"Compositor","text":"layout = :(\n        vstack(\n            A(5, 40), B(5, 40), hstack(C(5, 18), D(5, 18); pad=4); pad=1\n        )\n)\nCompositor(layout)","category":"page"},{"location":"layout/compositor/","page":"Compositor","title":"Compositor","text":"and remember that you can use interpolation in the expression, so a large expression for a complex layout can be broken down into smaller pieces:","category":"page"},{"location":"layout/compositor/","page":"Compositor","title":"Compositor","text":"first_column = :(\n    vstack(\n            A(5, 40), B(5, 40), hstack(C(5, 18), D(5, 18); pad=4); pad=1\n        )\n)\nsecond_column = :(\n    vstack(\n            F(5, 40), G(5, 40), hstack(H(5, 18), I(5, 18); pad=4); pad=1\n        )\n)\n\nlayout = :(\n         ($first_column * E(20, 5) * $second_column) / O(5, 85)\n)\n\nCompositor(layout)","category":"page"},{"location":"layout/compositor/","page":"Compositor","title":"Compositor","text":"easy peasy.","category":"page"},{"location":"layout/compositor/#Compositor-content","page":"Compositor","title":"Compositor content","text":"","category":"section"},{"location":"layout/compositor/","page":"Compositor","title":"Compositor","text":"Some of you will be thinking: \"this is all well and good, but I don't want to just show place holders I've got actual content!\". Fair enough, so let's add some.","category":"page"},{"location":"layout/compositor/","page":"Compositor","title":"Compositor","text":"The easiest thing is to pass content to Compositor directly:","category":"page"},{"location":"layout/compositor/","page":"Compositor","title":"Compositor","text":"\npanel = Panel(height=5, width=45)\nlayout = :(A(5, 45) * B(5, 45))\n\nCompositor(layout; B=panel)","category":"page"},{"location":"layout/compositor/","page":"Compositor","title":"Compositor","text":"done!","category":"page"},{"location":"layout/compositor/","page":"Compositor","title":"Compositor","text":"But there's more and it's something that warrants an admonition:","category":"page"},{"location":"layout/compositor/","page":"Compositor","title":"Compositor","text":"warning: Warning\nA Compositor is not a Renderable!!! When stacking renderables, using grid etc you get out an actual Renderable <: AbstractRenderable which behaves like any good renderable does. Compositor does not do that, it does a whole lot more (and even more in the future) but to do that it needs to be different from a renderable. Among other things this means that it can't be stacked/nested with other renderables. But it's worth it!","category":"page"},{"location":"layout/compositor/#Updating-a-compositor","page":"Compositor","title":"Updating a compositor","text":"","category":"section"},{"location":"layout/compositor/","page":"Compositor","title":"Compositor","text":"That's right, you can update a compositor at any time. That's different from, say, using grid where you don't have access to its constituents. Here you can grab any element of the layout and update it at will:","category":"page"},{"location":"layout/compositor/","page":"Compositor","title":"Compositor","text":"layout = :(A(5, 45) * B(5, 45))\n\ncomposition = Compositor(layout; B=panel)\nupdate!(composition, :B, panel)\ncomposition","category":"page"},{"location":"layout/compositor/","page":"Compositor","title":"Compositor","text":"nice, but that's not it. You can keep updating stuff!","category":"page"},{"location":"layout/compositor/","page":"Compositor","title":"Compositor","text":"\nanother_panel = Panel(height=5, width=45, background=\"on_red\", style=\"bold red\",  box=:SQUARE)\nupdate!(composition, :B, another_panel)\ncomposition","category":"page"},{"location":"layout/compositor/","page":"Compositor","title":"Compositor","text":"and so on... just make sure that the new content has the correct size specified in layout or Compositor will complain:","category":"page"},{"location":"layout/compositor/","page":"Compositor","title":"Compositor","text":"\np = Panel()\nupdate!(composition, :B, p)\ncomposition","category":"page"},{"location":"layout/grid/#Grid","page":"Grid","title":"Grid","text":"","category":"section"},{"location":"layout/grid/","page":"Grid","title":"Grid","text":"Layout renderables (hLine, vLine), nesting, stacking... all very nice. But boy is it a lot of work sometimes to combine it all into a single layout!","category":"page"},{"location":"layout/grid/","page":"Grid","title":"Grid","text":"Well that's were grid comes in (and Compositor too, see the next page). The idea is simple: take a bunch of renderables and make a grid out of them:","category":"page"},{"location":"layout/grid/","page":"Grid","title":"Grid","text":"import Term: Panel\nimport Term.Grid: grid\n\n\npanels = repeat([Panel(height=6, width=12)], 8)\n\ngrid(panels)","category":"page"},{"location":"layout/grid/","page":"Grid","title":"Grid","text":"Simple, but effective. grid gives you a lot of options to control the layout:","category":"page"},{"location":"layout/grid/","page":"Grid","title":"Grid","text":"grid(panels; pad=2)  # specify padding","category":"page"},{"location":"layout/grid/","page":"Grid","title":"Grid","text":"grid(panels; pad=(8, 1))  # hpad & vpad","category":"page"},{"location":"layout/grid/","page":"Grid","title":"Grid","text":"You can also specify the aspect ratio of the grid:","category":"page"},{"location":"layout/grid/","page":"Grid","title":"Grid","text":"grid(panels; aspect=1)","category":"page"},{"location":"layout/grid/","page":"Grid","title":"Grid","text":"Note that with an aspect ratio of 1 the best way is to create 3 columns and 3 rows, but we only have 8 renderables! No problem, grid introduces a placeholder for the missing renderables. This is not shown by default, but you can see it with: But you can hide it too:","category":"page"},{"location":"layout/grid/","page":"Grid","title":"Grid","text":"grid(panels; aspect=1, show_placeholder=true)","category":"page"},{"location":"layout/grid/","page":"Grid","title":"Grid","text":"You can use layout to more directly specify the number of rows and columns in the grid:","category":"page"},{"location":"layout/grid/","page":"Grid","title":"Grid","text":"grid(panels; layout=(3, 4), show_placeholder=true)","category":"page"},{"location":"layout/grid/","page":"Grid","title":"Grid","text":"Leaving a nothing argument will auto-magically compute the remaining rows or cols of the layout: You can use layout to more directly specify the number of rows and columns in the grid:","category":"page"},{"location":"layout/grid/","page":"Grid","title":"Grid","text":"grid(panels; layout=(3, nothing), show_placeholder=true)","category":"page"},{"location":"layout/grid/","page":"Grid","title":"Grid","text":"One can use complex expressions for layouts, using an underscore _ to specify empty elements in the layout:","category":"page"},{"location":"layout/grid/","page":"Grid","title":"Grid","text":"grid(panels[1:6]; layout=:((a * _ * b) / (_ * _ * c * d) / (_ * e * f)))","category":"page"},{"location":"layout/grid/","page":"Grid","title":"Grid","text":"Repeating elements is supported:","category":"page"},{"location":"layout/grid/","page":"Grid","title":"Grid","text":"grid(panels[1:2]; layout=:((α * _ * α) / (_ * _ * β * β)))","category":"page"},{"location":"layout/grid/","page":"Grid","title":"Grid","text":"note: Note\nNote that grid uses vstack and hstack to combine the renderables into the layout you requested. As such, it returns a single renderable, you don't have access to the individual renderables that went into making the grid any longer. This also means that the grid can be stack with other content to create a larger layout. ","category":"page"},{"location":"adv/errors_tracebacks/#Errors","page":"Errors","title":"Errors","text":"","category":"section"},{"location":"adv/errors_tracebacks/","page":"Errors","title":"Errors","text":"In Logging we've seen how Term can replace the default logging system in Julia to produce stylized logging messages. Term can do the same for error messages and stack traces.","category":"page"},{"location":"adv/errors_tracebacks/","page":"Errors","title":"Errors","text":"warning: not for developers\nSetting up Term's error handling will change this behavior for any downstream user of your code. While this could be okay, it might be surprising and undesirable for some, so do at your own risk. If you're writing code just for you, then go ahead! Term's error messages look great and hopefully they'll help finding and fixing errors more quickly.","category":"page"},{"location":"adv/errors_tracebacks/","page":"Errors","title":"Errors","text":"Setting up Term to handle errors for you is very simple:","category":"page"},{"location":"adv/errors_tracebacks/","page":"Errors","title":"Errors","text":"import Term: install_term_stacktrace\n\ninstall_term_stacktrace()  # entering the danger zone\n\n1 + \"this wont work\"","category":"page"},{"location":"adv/errors_tracebacks/","page":"Errors","title":"Errors","text":"(Image: )","category":"page"},{"location":"basics/basics/#Intro","page":"Intro","title":"Intro","text":"","category":"section"},{"location":"basics/basics/","page":"Intro","title":"Intro","text":"This section aims to introduce the basic concepts about Term. It will show how to create styled text with color and style information and how to create more complex renderable objects such as Panel and TextBoxes. Finally we'll go over how to 'stack' these renderables to crate complex layouts in your terminal. ","category":"page"},{"location":"basics/basics/","page":"Intro","title":"Intro","text":"The main goal of all of this is to produce beautiful, informative, terminal outputs.  Term can do a lot more than this (e.g., it can replace the standard logging system in Julia), but this kind of advanced functionality is discussed in a separate section.","category":"page"},{"location":"basics/basics/","page":"Intro","title":"Intro","text":"Let's get started!","category":"page"},{"location":"adv/adv/#Intro","page":"Intro","title":"Intro","text":"","category":"section"},{"location":"adv/adv/","page":"Intro","title":"Intro","text":"In the Basics section we've learned how to style text, create renderables and stack them into more complex layouts. You can use all of that to produce great terminal output for your Julia code, but that doesn't exhaust the range of things Term can do. ","category":"page"},{"location":"adv/adv/","page":"Intro","title":"Intro","text":"In this section we'll have a look at Term's additional functionality: logging discusses how to replace the default logging system in Julia to style logging messages with Term, Errors looks at how to replace the standard error messages with better ones made by Term and introspection will discuss Term's inspect function which can be used to peek into objects in your Julia code.","category":"page"},{"location":"adv/adv/","page":"Intro","title":"Intro","text":"Let's get started.","category":"page"},{"location":"api/api_style/#Style","page":"Style","title":"Style","text":"","category":"section"},{"location":"api/api_style/","page":"Style","title":"Style","text":"CurrentModule = Term.Style","category":"page"},{"location":"api/api_style/","page":"Style","title":"Style","text":"Pages   = [\"api_style.md\"]","category":"page"},{"location":"api/api_style/","page":"Style","title":"Style","text":"Modules = [Style]","category":"page"},{"location":"api/api_style/#Term.Style.MarkupStyle","page":"Style","title":"Term.Style.MarkupStyle","text":"MarkupStyle\n\nHolds information about the style specification set out by a MarkupTag.\n\n\n\n\n\n","category":"type"},{"location":"api/api_style/#Term.Style.MarkupStyle-Tuple{Any}","page":"Style","title":"Term.Style.MarkupStyle","text":"MarkupStyle(tag::MarkupTag)\n\nBuilds a MarkupStyle definition from a MarkupTag.\n\n\n\n\n\n","category":"method"},{"location":"api/api_style/#Term.Style.apply_style-Tuple{Any}","page":"Style","title":"Term.Style.apply_style","text":"apply_style(text)\n\nApply style to a piece of text.\n\nExtract markup style information and insert the  appropriate ANSI codes to style a string.\n\n\n\n\n\n","category":"method"},{"location":"api/api_style/#Term.Style.get_style_codes-Tuple{Term.Style.MarkupStyle}","page":"Style","title":"Term.Style.get_style_codes","text":"get_style_codes(style::MarkupStyle)\n\nGet ANSICodes corresponding to a MarkupStyle.\n\n\n\n\n\n","category":"method"},{"location":"api/api_style/#Term.Style.is_mode-Tuple{Any}","page":"Style","title":"Term.Style.is_mode","text":"Check if a string is a mode name\n\n\n\n\n\n","category":"method"},{"location":"api/api_console/#Consoles","page":"Consoles","title":"Consoles","text":"","category":"section"},{"location":"api/api_console/","page":"Consoles","title":"Consoles","text":"CurrentModule = Term.Consoles","category":"page"},{"location":"api/api_console/","page":"Consoles","title":"Consoles","text":"Pages   = [\"api_console.md\"]","category":"page"},{"location":"api/api_console/","page":"Consoles","title":"Consoles","text":"Modules = [Consoles]","category":"page"},{"location":"api/api_console/#Term.Consoles.beginning_previous_line","page":"Consoles","title":"Term.Consoles.beginning_previous_line","text":"Move cursor to the beginning of the previous line\n\n\n\n\n\n","category":"function"},{"location":"api/api_console/#Term.Consoles.change_scroll_region","page":"Consoles","title":"Term.Consoles.change_scroll_region","text":"Change the position of the scrolling region in the terminal.\n\nSee: http://www.sweger.com/ansiplus/EscSeqScroll.html\n\n\n\n\n\n","category":"function"},{"location":"api/api_console/#Term.Consoles.clear","page":"Consoles","title":"Term.Consoles.clear","text":"clear(io::IO = stdout)\n\nClear terminal from anything printed in the REPL.\n\n\n\n\n\n","category":"function"},{"location":"api/api_console/#Term.Consoles.console_height","page":"Consoles","title":"Term.Consoles.console_height","text":"console_height()\n\nGet the current console height.\n\n\n\n\n\n","category":"function"},{"location":"api/api_console/#Term.Consoles.console_width","page":"Consoles","title":"Term.Consoles.console_width","text":"console_width()\n\nGet the current console width.\n\n\n\n\n\n","category":"function"},{"location":"api/api_console/#Term.Consoles.cursor_position","page":"Consoles","title":"Term.Consoles.cursor_position","text":"Get cursor position\n\n\n\n\n\n","category":"function"},{"location":"api/api_console/#Term.Consoles.erase_line","page":"Consoles","title":"Term.Consoles.erase_line","text":"Erase last line in console.\n\n\n\n\n\n","category":"function"},{"location":"api/api_console/#Term.Consoles.hide_cursor","page":"Consoles","title":"Term.Consoles.hide_cursor","text":"Hide cursor\n\n\n\n\n\n","category":"function"},{"location":"api/api_console/#Term.Consoles.line","page":"Consoles","title":"Term.Consoles.line","text":"write a new line.\n\n\n\n\n\n","category":"function"},{"location":"api/api_console/#Term.Consoles.move_to_line","page":"Consoles","title":"Term.Consoles.move_to_line","text":"Move cursor to a specific line\n\n\n\n\n\n","category":"function"},{"location":"api/api_console/#Term.Consoles.next_line","page":"Consoles","title":"Term.Consoles.next_line","text":"Move cursor down one or more lines\n\n\n\n\n\n","category":"function"},{"location":"api/api_console/#Term.Consoles.restorecursor","page":"Consoles","title":"Term.Consoles.restorecursor","text":"Restore a previously saved cursor position\n\n\n\n\n\n","category":"function"},{"location":"api/api_console/#Term.Consoles.savecursor","page":"Consoles","title":"Term.Consoles.savecursor","text":"Save the current cursor position\n\n\n\n\n\n","category":"function"},{"location":"api/api_console/#Term.Consoles.show_cursor","page":"Consoles","title":"Term.Consoles.show_cursor","text":"Show cursor\n\n\n\n\n\n","category":"function"},{"location":"basics/renderables/#Renderables","page":"Renderables","title":"Renderables","text":"","category":"section"},{"location":"basics/renderables/","page":"Renderables","title":"Renderables","text":"In the previous section we...","category":"page"},{"location":"basics/renderables/","page":"Renderables","title":"Renderables","text":"using Term  # hidden\ntprint(\"{green}...have seen how to add some {gold3 bold underline}style{/gold3 bold underline} to our text\")  # hidden","category":"page"},{"location":"basics/renderables/","page":"Renderables","title":"Renderables","text":"and that's great, but it's not enough. If you want to create really beautiful and structured terminal outputs, a bit of color and bold text is not enough. You want to be able to create panels to separate different pieces of content, lines to mark out different sections, you want to be able to control the aspect (e.g. line length) of the content you are printing and, most importantly, you want to do all this without too many headaches. Term.jl has got your back.","category":"page"},{"location":"basics/renderables/","page":"Renderables","title":"Renderables","text":"In this section we will look at Renderable objects (subtypes of AbstractRenderable) such as TextBox and Panel. Each type of renderable also has a dedicated pages under the section \"Renderables\" where the renderable is described more in detail. Here we will describe renderables in general, while in the coming section we'll talk about building layouts composed of multiple renderables. ","category":"page"},{"location":"basics/renderables/#AbstractRenderable","page":"Renderables","title":"AbstractRenderable","text":"","category":"section"},{"location":"basics/renderables/","page":"Renderables","title":"Renderables","text":"This section focuses a bit on how renderables work under the hood. If you just want use Term and you don't care too much for how it works, skip ahead to the next section!","category":"page"},{"location":"basics/renderables/","page":"Renderables","title":"Renderables","text":"When you venture beyond styling simple strings, virtually every object you'll encounter will be a subtype of the  AbstractRenderable type. We will call these objects renderables. Renderable types vary, but they all must have two fields: Segment and Measure:","category":"page"},{"location":"basics/renderables/","page":"Renderables","title":"Renderables","text":"A Segment is roughly equivalent to one line of text. Let's take something like this (printed out in your terminal):","category":"page"},{"location":"basics/renderables/","page":"Renderables","title":"Renderables","text":"╭────────────────────╮\n│                    │\n╰────────────────────╯","category":"page"},{"location":"basics/renderables/","page":"Renderables","title":"Renderables","text":"you can think of this as being made of three segments:","category":"page"},{"location":"basics/renderables/","page":"Renderables","title":"Renderables","text":"# 1\n╭────────────────────╮\n\n# 2\n│                    │\n\n# 3\n╰────────────────────╯","category":"page"},{"location":"basics/renderables/","page":"Renderables","title":"Renderables","text":"When the renderable get's printed each of its segments is printed separately on a new line, giving the illusion of a single object (if we designed the segments correctly).  In addition, the text stored by a Segment already has applied style information to it (i.e. markup tags are converted to ANSI codes), so it's ready to print!","category":"page"},{"location":"basics/renderables/","page":"Renderables","title":"Renderables","text":"In addition to a vector of segments, a renderable is defined by a Measure object. Roughly speaking, a Measure object stores information about the size of a renderable as it will appear in the terminal. Anything can have a measure: a string of text, a segment (the measure of its text) and a renderable (the combined measure of its segments). This information is crucial when we start putting multiple renderables together. For instance the renderable shown above is a Panel and a Panel can be created to fit a piece of text:","category":"page"},{"location":"basics/renderables/","page":"Renderables","title":"Renderables","text":"import Term: Panel\n\nprint(Panel(\"this is {red}RED{/red}\"; fit=true))","category":"page"},{"location":"basics/renderables/","page":"Renderables","title":"Renderables","text":"in order to do that Panel needs to know the size of the text it needs to fit, and that's done by taking its measure (note that the measure correctly ignores the style information to get the size of the text as it will be when printed out). Finally, we can think of the panel itself as having a Measure=(17, 3): 17 is the width of the panel and 3 its height (the number of segments). Again, this information is crucial when creating layouts of multiple renderables:","category":"page"},{"location":"basics/renderables/","page":"Renderables","title":"Renderables","text":"\nimport Term: Panel\n\nprint(Panel(;height=3, width=6) * Panel(; height=5, width=12))","category":"page"},{"location":"basics/renderables/","page":"Renderables","title":"Renderables","text":"but more on that in the next section. ","category":"page"},{"location":"basics/renderables/#Other-renderables","page":"Renderables","title":"Other renderables","text":"","category":"section"},{"location":"basics/renderables/","page":"Renderables","title":"Renderables","text":"Term comes with a few different types of renderables (we saw Panel already, but there's more), but the basic idea is that they are made of segments of text and have a measure. Each renderable has its own additional features on top of that, but those are described more in detail in dedicated pages (look left!). Briefly, we have Panel which creates stuff like what we've just seen, RenderableText which handles rendering text in the console (surprise!) and TextBox which is somewhat in between the two. Other renderables include things like Tree and, in the future, Table. Now lets look at how we can put multiple renderables together!","category":"page"},{"location":"api/api_markdown/#Term-Markdown","page":"Term Markdown","title":"Term Markdown","text":"","category":"section"},{"location":"api/api_markdown/","page":"Term Markdown","title":"Term Markdown","text":"CurrentModule = Term.TermMarkdown","category":"page"},{"location":"api/api_markdown/","page":"Term Markdown","title":"Term Markdown","text":"Pages   = [\"api_markdown.md\"]","category":"page"},{"location":"api/api_markdown/","page":"Term Markdown","title":"Term Markdown","text":"Modules = [TermMarkdown]","category":"page"},{"location":"api/api_markdown/#Term.Renderables.RenderableText-Tuple{Markdown.MD}","page":"Term Markdown","title":"Term.Renderables.RenderableText","text":"\n\nRenderableText(md::Markdown.MD; width = console_width() - 2, kwargs...)\n\nCreate a RenderableText from a markdown string.\n\n\n\n\n\n","category":"method"},{"location":"api/api_markdown/#Term.TermMarkdown.parse_md","page":"Term Markdown","title":"Term.TermMarkdown.parse_md","text":"parse_md\n\nParse a Markdown element (Paragraph, List...) into a string.\n\nA width keyword argument can be used to control the width of  the string representation and an inline boolean argument specifies when an element (e.g. a code snippet) is in-line within a larger element (e.g. a paragraph).\n\n\n\n\n\n","category":"function"},{"location":"api/api_markdown/#Term.TermMarkdown.parse_md-Tuple{Markdown.Admonition}","page":"Term Markdown","title":"Term.TermMarkdown.parse_md","text":"function parse_md(ad::Markdown.Admonition; width = console_width(), kwargs...)::String\n\nParse adomitions and style them with colored Panel renderables.\n\n\n\n\n\n","category":"method"},{"location":"api/api_markdown/#Term.TermMarkdown.parse_md-Tuple{Markdown.BlockQuote}","page":"Term Markdown","title":"Term.TermMarkdown.parse_md","text":"function parse_md(\n    qt::Markdown.BlockQuote;\n    width = default_width(),\n    kwargs...,\n)::String\n\nStyle a BlockQuote with a line and a quotation marker.\n\n\n\n\n\n","category":"method"},{"location":"api/api_markdown/#Term.TermMarkdown.parse_md-Tuple{Markdown.Code}","page":"Term Markdown","title":"Term.TermMarkdown.parse_md","text":"\n\nfunction parse_md(\n    code::Markdown.Code;\n    width = console_width(),\n    inline = false,\n    kwargs...,\n)::String\n\nParse a code snippet with syntax highlighting (for Julia code).\n\nFor non-inline code snippets the code is put in a panel with different background coloring to make it stand out.\n\n\n\n\n\n","category":"method"},{"location":"api/api_markdown/#Term.TermMarkdown.parse_md-Tuple{Markdown.Footnote}","page":"Term Markdown","title":"Term.TermMarkdown.parse_md","text":"parse_md(note::Markdown.Footnote; width = console_width(), inline = false)\n\nStyle a footnote differently based on if they are a renference to it or its content.\n\n\n\n\n\n","category":"method"},{"location":"api/api_markdown/#Term.TermMarkdown.parse_md-Tuple{Markdown.LaTeX}","page":"Term Markdown","title":"Term.TermMarkdown.parse_md","text":"\n\nfunction parse_md(\n    ltx::Markdown.LaTeX;\n    inline = false,\n    width = console_width(),\n    kwargs...,\n)::String\n\nParse a math element. Try to convert it to unicode characters when possible, otherwise output the latex string.\n\n\n\n\n\n","category":"method"},{"location":"api/api_markdown/#Term.TermMarkdown.parse_md-Tuple{Markdown.List}","page":"Term Markdown","title":"Term.TermMarkdown.parse_md","text":"function parse_md(\n    list::Markdown.List;\n    width = console_width(),\n    inline = false,\n    space = \"\",\n)::String\n\nParse a list and all its elements, for both numbered and unnumbered lists.\n\n\n\n\n\n","category":"method"},{"location":"api/api_markdown/#Term.TermMarkdown.parse_md-Tuple{Markdown.MD}","page":"Term Markdown","title":"Term.TermMarkdown.parse_md","text":"parse_md(text::Markdown.MD; kwargs...)::String\n\nParse an entier MD object by parsing its constituent elements and joining the resulting strings.\n\n\n\n\n\n","category":"method"},{"location":"api/api_markdown/#Term.TermMarkdown.parse_md-Tuple{Markdown.Paragraph}","page":"Term Markdown","title":"Term.TermMarkdown.parse_md","text":"parse_md(paragraph::Markdown.Paragraph; width = console_width(), kwargs...)::String\n\nParse each element in a paragraph\n\n\n\n\n\n","category":"method"},{"location":"api/api_markdown/#Term.TermMarkdown.parse_md-Tuple{Markdown.Table}","page":"Term Markdown","title":"Term.TermMarkdown.parse_md","text":"function parse_md(tb::Markdown.Table; width = console_width())::String\n\nConvert a markdown Table to a Table renderable.\n\n\n\n\n\n","category":"method"},{"location":"api/api_markdown/#Term.TermMarkdown.parse_md-Union{Tuple{Markdown.Header{l}}, Tuple{l}} where l","page":"Term Markdown","title":"Term.TermMarkdown.parse_md","text":"parse_md(header::Markdown.Header{l}; width = console_width(), kwargs...) where {l}\n\nParse Headers with different style based on the level\n\n\n\n\n\n","category":"method"},{"location":"api/api_markdown/#Term.Tprint.tprint-Tuple{Markdown.MD}","page":"Term Markdown","title":"Term.Tprint.tprint","text":"\n\ntprint(md::Markdown.MD; kwargs...)\n\nPrint a parsed markdown string.\n\n\n\n\n\n","category":"method"},{"location":"api/api_markdown/#Term.Tprint.tprintln-Tuple{Markdown.MD}","page":"Term Markdown","title":"Term.Tprint.tprintln","text":"\n\ntprintln(md::Markdown.MD; kwargs...)\n\nPrint a parsed markdown string.\n\n\n\n\n\n","category":"method"},{"location":"api/api_tables/#Tables","page":"Tables","title":"Tables","text":"","category":"section"},{"location":"api/api_tables/","page":"Tables","title":"Tables","text":"CurrentModule = Term.Tables","category":"page"},{"location":"api/api_tables/","page":"Tables","title":"Tables","text":"Pages   = [\"api_tables.md\"]","category":"page"},{"location":"api/api_tables/","page":"Tables","title":"Tables","text":"Modules = [Tables]","category":"page"},{"location":"api/api_tables/#Term.Tables.Table","page":"Tables","title":"Term.Tables.Table","text":"Table\n\nA Table renderable.\n\nExamples\n\n\nt = 1:3\ndata = hcat(t, rand(Int8, length(t)))\nTable(data)\n\n┌───────────┬───────────┐\n│  Column1  │  Column2  │\n├───────────┼───────────┤\n│     1     │    -95    │\n├───────────┼───────────┤\n│     2     │    -85    │\n├───────────┼───────────┤\n│     3     │    115    │\n└───────────┴───────────┘\n\n\n\n\n\n","category":"type"},{"location":"api/api_tables/#Term.Tables.Table-Tuple{AbstractDict}","page":"Tables","title":"Term.Tables.Table","text":"Table(data::AbstractDict; kwargs...)\n\nConstruct Table from a Dict. The Dict's keys make up the table header if none is assigned.\n\n\n\n\n\n","category":"method"},{"location":"api/api_tables/#Term.Tables.Table-Tuple{AbstractVecOrMat}","page":"Tables","title":"Term.Tables.Table","text":"Table(data::Union{AbstractVector, AbstractMatrix}; kwargs...)\n\nConstruct Table from Vector and Matrix\n\n\n\n\n\n","category":"method"},{"location":"api/api_tables/#Term.Tables.Table-Tuple{Tables.AbstractColumns}","page":"Tables","title":"Term.Tables.Table","text":"Table(\n    tb::TablesPkg.AbstractColumns;\n    box::Symbol = :SQUARE,\n    style::String = \"default\",\n    hpad::Union{Vector,Int} = 2,\n    vpad::Union{Vector,Int} = 0,\n    vertical_justify::Symbol = :center,\n    show_header::Bool = true,\n    header::Union{Nothing,Vector,Tuple} = nothing,\n    header_style::Union{String,Vector,Tuple} = \"default\",\n    header_justify::Union{Nothing,Symbol,Vector,Tuple} = nothing,\n    columns_style::Union{String,Vector,Tuple} = \"default\",\n    columns_justify::Union{Symbol,Vector,Tuple} = :center,\n    columns_widths::Union{Nothing,Int,Vector} = nothing,\n    footer::Union{Function,Nothing,Vector,Tuple} = nothing,\n    footer_style::Union{String,Vector,Tuple} = \"default\",\n    footer_justify::Union{Nothing,Symbol,Vector,Tuple} = :center,\n    compact::Bool = false,\n)\n\nGeneric constructor for a Table renderable.\n\ntip: Tip\nArguments such as header_style, columns_style and footer_style can  either be passed a single value, which will be applied to all columns, or a vector of values, which will be applied to each column.\n\n\n\n\n\n","category":"method"},{"location":"api/api_tables/#Term.Tables.assert_table_arguments-NTuple{14, Any}","page":"Tables","title":"Term.Tables.assert_table_arguments","text":"assert_table_arguments\n\nCheck that arguments passed to Table match the Table's shape. Single arguments are fine, but when a vector is passed it should have the appropriate size.\n\n\n\n\n\n","category":"method"},{"location":"api/api_tables/#Term.Tables.calc_columns_widths-Tuple{Int64, Int64, Union{Nothing, Int64, Vector}, Bool, Any, Any, Any, Any, Any}","page":"Tables","title":"Term.Tables.calc_columns_widths","text":"columns_widths\n\nGet the width of each column in a Table.\n\nIf user passed a columns_widths argument use that, otherwise compute the width of each column based on the size of its contents including the header and footer.\n\n\n\n\n\n","category":"method"},{"location":"api/api_tables/#Term.Tables.cell-Tuple{AbstractString, Int64, Int64, Int64, Symbol, String, Symbol}","page":"Tables","title":"Term.Tables.cell","text":"cell(x::AbstractString, hor_pad::Int, h::Int, w::Int, justify::Symbol, style::String, vertical_justify::Symbol)\n\nCreate a Table's row's cell from a string - apply styling and vertical/horizontal justification.\n\n\n\n\n\n","category":"method"},{"location":"api/api_tables/#Term.Tables.cell-Tuple{Term.Renderables.AbstractRenderable, Int64, Int64, Int64, Symbol, String, Symbol}","page":"Tables","title":"Term.Tables.cell","text":"cell(x::AbstractString, hor_pad::Int, h::Int, w::Int, justify::Symbol, style::String, vertical_justify::Symbol)\n\nCreate a Table's row's cell from a renderable - apply styling and vertical/horizontal justification.\n\n\n\n\n\n","category":"method"},{"location":"api/api_tables/#Term.Tables.expand-Tuple{Vector, Int64}","page":"Tables","title":"Term.Tables.expand","text":"expand\n\nExpand single Table arguments into a vector if necessary.\n\n\n\n\n\n","category":"method"},{"location":"api/api_tables/#Term.Tables.make_row_cells-Tuple{Union{Tuple, Vector}, Vector{String}, Vector{Symbol}, Vector{Int64}, Vector{Int64}, Int64, Symbol}","page":"Tables","title":"Term.Tables.make_row_cells","text":"make_row_cells(\n    entries::Union{Tuple, Vector}, \n    style::Vector{String}, \n    justify::Vector{Symbol},\n    widths::Vector{Int},\n    height::Int, \n    vertical_justify::Symbol,\n)\n\nCreate a row's cell from a vector of 'entries' (renderables or strings).\n\n\n\n\n\n","category":"method"},{"location":"api/api_tables/#Term.Tables.rows_heights-Tuple{Int64, Bool, Any, Any, Any, Any}","page":"Tables","title":"Term.Tables.rows_heights","text":"rows_heights\n\nGet the height of each row in a Table\n\n\n\n\n\n","category":"method"},{"location":"api/api_tables/#Term.Tables.table_row-Tuple{Vector, Vector, Any, Union{Nothing, Symbol}, Symbol, Symbol, Any, Int64}","page":"Tables","title":"Term.Tables.table_row","text":"function table_row(\n    cells::Vector,\n    widths::Vector,\n    box::Symbol,\n    top_level::Symbol,\n    mid_level::Symbol,\n    bottom_level::Symbol,\n    box_style::String,\n    row_height::Int;\n    compact = false,\n)\n\nCreate a single row of a Table renderable. \n\nEach row is made up of an upper, mid and bottom section. The upper and bottom sections are created by rows of the Box type. The mid section is made up of the row's cells and dividing lines.\n\nArguments\n\ncells: vector of cells content. Of length equal to the number of columns\nwidths: vector of width of each cell.\nbox: name of the Box used to construct the cell's lines\ntop/mid/bottom_level: name of the Box level to be used for construction\nbox_style: styling to be applied to box\nrow_height: height of the row\ncompact: if true avoids adding a top layer to the row\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = Term","category":"page"},{"location":"#Term","page":"Home","title":"Term","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Term.jl is a Julia library for producing styled, beautiful terminal output.  It uses a simple markup syntax to add style information to standard Julia strings. It also provides Renderable objects such as the Panel and TextBox as you can see in the example below. These too can be styled, include styled text, and they can be nested and stacked to produce structured visual displays in your terminal. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"warning: Version 1.0\nIf you're an early adopter of Term, I have some bad news for you (and some good). Version 1.0 introduces some breaking changes. I know, I know. But it's worth it I promise, it also has a ton of new features and improvements. The main thing you need to look out for is the markup syntax. Instead of [...] content [/...] now you need to use {...} content {/...}. That's right, curly braces instead of square. It's not a huge change!","category":"page"},{"location":"","page":"Home","title":"Home","text":"warning: OS concerns\nTerm has been tested extensively so far, but only on Mac. If you're using a Linux or Windows machine you might find some bugs that have eluded us so far. Please get in touch so that we can fix them!","category":"page"},{"location":"","page":"Home","title":"Home","text":"info: `Term` and `rich`\nWhile Term was written from scratch in Julia, it's based upon a pre-existing python library called rich. If you have never used rich, just know that it's absolutely awesome. And its creator, Will McGugan, made it open source for anyone to use. That also meant people like us could took inspiration from rich to create related packages in other languages. We are very grateful to Will, and we hope that Term will end up being a fraction as cool as rich.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"In a Julia script:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\n\nPkg.add(\"Term\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"or in the Julia REPL","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> ]  # enters the pkg interface\npkg> add Term","category":"page"},{"location":"","page":"Home","title":"Home","text":"done!","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"The rest of the documentation is dedicated to explaining the basic concepts behind Term.jl and how to use Term to produce styled terminal text.  Head to the GitHub repository to find several detailed examples or jump in the Discussions to start chatting with us. ","category":"page"},{"location":"#Getting-in-touch","page":"Home","title":"Getting in touch","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you want to get in touch with us, the easiest way is on GitHub. You can open an issue to report a bug or ask for a new feature or join the discussions for more general chats about Term. The discussion section is also a good place to go for general questions about Term and how to use it. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"Term is written to be a useful piece of software for anyone using Julia, from beginners to more advanced users. If you're comfortable writing and testing code, you can jump in right now and start actively working on Term with us. If you're not, that's totally fine. There's a lot of ways in which you can help: open an issue to report problems with Term, ask questions on GitHub, help expand the docs and examples for other users too. Or just tell us what you're experience using Term was like, any feedback can help us improve!","category":"page"},{"location":"#Related-packages","page":"Home","title":"Related packages","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"As mentioned, Term is inspired on rich in python. There's also a project called Spectre console which is a .NET Standard 2.0 version of rich.","category":"page"},{"location":"","page":"Home","title":"Home","text":"In Julia there's several pre-existing packages aimed at producing styling terminal output, we note in particular:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Crayons\nAnsiColor","category":"page"},{"location":"ren/dendogram/#DendoDoc","page":"Dendogram","title":"Dendogram","text":"","category":"section"},{"location":"ren/dendogram/","page":"Dendogram","title":"Dendogram","text":"Similarly to Tree, Dendogram is a renderable that can be used to visualize hierarchical data:","category":"page"},{"location":"ren/dendogram/","page":"Dendogram","title":"Dendogram","text":"import Term.Dendograms: Dendogram\n\ndendo = Dendogram(\"trunk\", \"the\", \"tree\", \"has\", \"leaves\")\nprint(dendo)","category":"page"},{"location":"ren/dendogram/","page":"Dendogram","title":"Dendogram","text":"As you can see, the first argument is the \"trunk\" or title of the dendogram while all other arguments are added as leaves. Compare it to a Tree renderable:","category":"page"},{"location":"ren/dendogram/","page":"Dendogram","title":"Dendogram","text":"import Term: Tree\nprint(\n    Tree(\n        Dict(:a=>\"the\", :b=>\"tree\", :c=>\"has\", :d=>\"leaves\")\n    )\n)","category":"page"},{"location":"ren/dendogram/","page":"Dendogram","title":"Dendogram","text":"If you've seen Tree, you'll know that Tree can handle nested hierarchical structures, what about Dendogram? The way you do that is by linking individual dendograms:","category":"page"},{"location":"ren/dendogram/","page":"Dendogram","title":"Dendogram","text":"import Term.Dendograms: link\n\nmydend = Dendogram(\"first\", [1, 2])\notherdend = Dendogram(\"other\", [:a, :b])\n\nprint(\n    link(mydend, link(otherdend, otherdend; title=\"another level\"); title=\"One level\")\n)","category":"page"},{"location":"ren/panel/#PanelDocs","page":"Panel","title":"Panel","text":"","category":"section"},{"location":"ren/panel/","page":"Panel","title":"Panel","text":"Okay, time to move beyond simple text. It's time for:","category":"page"},{"location":"ren/panel/","page":"Panel","title":"Panel","text":"import Term: Panel # hide\nprint(# hide\n    Panel(# hide\n        \"{red}awesome{/red}\", # hide\n        title=\"Term's\", # hide\n        title_style=\"bold green\", # hide\n        style=\"gold1 bold\", # hide\n        subtitle=\"Panels\", # hide\n        subtitle_style=\"bold blue\", # hide\n        subtitle_justify=:right, # hide\n        width=18, # hide\n        justify=:center # hide\n    ) # hide\n) # hide","category":"page"},{"location":"ren/panel/","page":"Panel","title":"Panel","text":"Simply put, a Panel shows a piece of content (generally a styled string, but it can be any Renderable really) surrounded by a box. Simple but effective.","category":"page"},{"location":"ren/panel/","page":"Panel","title":"Panel","text":"Well not that simple actually because Term.Panels.Panel is the first renderable that allows you lots of options to personalize its appearance. For instance the panel printed above is given by:","category":"page"},{"location":"ren/panel/","page":"Panel","title":"Panel","text":"    Panel(\n        \"{red}awesome{/red}\",\n        title=\"Term's\",\n        title_style=\"bold green\",\n        style=\"gold1 bold\",\n        subtitle=\"Panels\",\n        subtitle_style=\"bold blue\",\n        subtitle_justify=:right,\n        width=18,\n        justify=:center\n    )","category":"page"},{"location":"ren/panel/","page":"Panel","title":"Panel","text":"The first argument is the content, the rest is styling options. As you can see you can specify the titles and subtitles (or leave them out if you prefer, do your thing!), their appearance (via markup style information) and their position (:left, :center or :right). The style argument sets the style of the box itself (and title/subtitle if they don't have dedicated style information).","category":"page"},{"location":"ren/panel/","page":"Panel","title":"Panel","text":"The box is created using Term's own Box type! It's not worth going too much into exactly how it works, but it's worth pointing out that there's loads of types of boxes:","category":"page"},{"location":"ren/panel/","page":"Panel","title":"Panel","text":"ASCII,\nASCII2,\nASCII_DOUBLE_HEAD,\nSQUARE,\nSQUARE_DOUBLE_HEAD,\nMINIMAL,\nMINIMAL_HEAVY_HEAD\nMINIMAL_DOUBLE_HEAD,\nSIMPLE,\nSIMPLE_HEAD,\nSIMPLE_HEAVY,\nHORIZONTALS,\nROUNDED,\nHEAVY\nHEAVY_EDGE,\nHEAVY_HEAD,\nDOUBLE,\nDOUBLE_EDGE","category":"page"},{"location":"ren/panel/","page":"Panel","title":"Panel","text":"And you can use any of these with your panels:","category":"page"},{"location":"ren/panel/","page":"Panel","title":"Panel","text":"import Term: Panel\n\nprint(\n    Panel(width=8, box=:DOUBLE, style=\"green\") *\n    Panel(width=8, box=:HEAVY, style=\"white\") *\n    Panel(width=8, box=:ROUNDED, style=\"red\"),\n)","category":"page"},{"location":"ren/panel/","page":"Panel","title":"Panel","text":"Let's look at some more examples:","category":"page"},{"location":"ren/panel/","page":"Panel","title":"Panel","text":"\nprint(\n    Panel(\"this panel has fixed width, text on the left\"; width = 66, justify = :left),    \n    Panel(\"this one too, but the text is at the center!\"; width = 66, justify = :center),\n    Panel(\"the text is here!\"; width = 66, justify = :right),\n)\nprint(\"\\n\")","category":"page"},{"location":"ren/panel/","page":"Panel","title":"Panel","text":"You can justify the panel's content to :left, :center, :right!","category":"page"},{"location":"ren/panel/","page":"Panel","title":"Panel","text":"    Panel(\"Titles have style too!!\"; width = 60, justify = :center, title=\"My Title\", title_style=\"red bold\", title_justify=:right, subtitle=\"Made with Term\", subtitle_style=\"dim\", subtitle_justify=:left\n)","category":"page"},{"location":"ren/panel/","page":"Panel","title":"Panel","text":"And style the title and subtitle, or the whole background too:","category":"page"},{"location":"ren/panel/","page":"Panel","title":"Panel","text":"import Term: highlight_syntax, apply_style, do_by_line, fillin\n\nsyntax_with_bg(t) = do_by_line(ln -> apply_style(ln, \"on_red\"), fillin(t) |> highlight_syntax)\n\nPanel(\n    syntax_with_bg(\"\"\"\nfunction show_off(x)\n    print(x)\nend\n\"\"\"); \n    background=\"on_red\"\n)\n","category":"page"},{"location":"ren/panel/","page":"Panel","title":"Panel","text":"By the way, Panels are not limited to having strings as content, they can have other renderables too (multiple ones in fact)!","category":"page"},{"location":"ren/panel/","page":"Panel","title":"Panel","text":"Panel(\n        Panel(width=18, style=\"green\"),\n        Panel(width=18, style=\"white\"),\n        Panel(width=18, style=\"red\"),\n        title=\"so many panels!\",\n        fit=true,\n        title_justify=:left,\n        title_style=\"bold red\"\n    )\n","category":"page"},{"location":"ren/panel/#Size-and-fitting","page":"Panel","title":"Size & fitting","text":"","category":"section"},{"location":"ren/panel/","page":"Panel","title":"Panel","text":"By default Panel tries to fit your content:","category":"page"},{"location":"ren/panel/","page":"Panel","title":"Panel","text":"print(Panel(\".\"^10))\nprint(Panel(\".\"^30))\nprint(Panel(\".\"^60))","category":"page"},{"location":"ren/panel/","page":"Panel","title":"Panel","text":"but you can change this by passing a width value. In fact you can se a height too:","category":"page"},{"location":"ren/panel/","page":"Panel","title":"Panel","text":"Panel(\".\"^10; height=5, width=20)","category":"page"},{"location":"ren/panel/","page":"Panel","title":"Panel","text":"Alternatively, you can use fit=false. ","category":"page"},{"location":"ren/panel/","page":"Panel","title":"Panel","text":"Panel(\".\"^10; fit=false)","category":"page"},{"location":"ren/panel/","page":"Panel","title":"Panel","text":"this will make all panels have the same width (unless you specify a width). The main difference is that if the content is larger than the panel, it will be truncated, which is not what happens if fit=true\"","category":"page"},{"location":"ren/panel/","page":"Panel","title":"Panel","text":"p1 = Panel(\".\"^10; height=5, width=60)\nprint(Panel(p1; height=2, width=30))  # fit=true -> expand out panel, width/height ignored\nprint(Panel(p1; height=10, width=30, fit=false))  # fit=false -> truncate the content\nprint(Panel(\"very long text\"^20; height=10, width=30, fit=false))  # text is reshaped to fit the panel","category":"page"},{"location":"ren/panel/#Padding","page":"Panel","title":"Padding","text":"","category":"section"},{"location":"ren/panel/","page":"Panel","title":"Panel","text":"You'll notice in the example above that there's still some space between the panel's borders and its content. That's padding. You can change how much padding to have to the left, right, top and bottom (in number of spaces/lines):","category":"page"},{"location":"ren/panel/","page":"Panel","title":"Panel","text":"inner = Panel(height=4, width=8, background=\"on_#262626\", style=\"bold red\")\nprint(\n    Panel(inner; fit=false, padding=(0, 0, 0, 0)),\n    Panel(inner; fit=false, padding=(3, 1, 3, 1)),\n    Panel(inner; fit=false, padding=(20, 3, 3, 1)),\n)","category":"page"},{"location":"ren/panel/","page":"Panel","title":"Panel","text":"The syntax is (left, right, top, bottom) and the default is (2, 2, 0, 0).","category":"page"},{"location":"ren/panel/#TBoxDoc","page":"Panel","title":"TextBox","text":"","category":"section"},{"location":"ren/panel/","page":"Panel","title":"Panel","text":"Sometimes you want to have the benefits of Panel (you can control the height, width, padding, justification, titles...) without actually showing the panel itself. Introduce: TextBox.","category":"page"},{"location":"ren/panel/","page":"Panel","title":"Panel","text":"using Term: TextBox\nTextBox(\"A very long piece of text\"^10; title=\"TEXT\", width=30, fit=false)","category":"page"},{"location":"ren/panel/","page":"Panel","title":"Panel","text":"Easy peasy!","category":"page"},{"location":"api/api_layout/#Layout","page":"Layout","title":"Layout","text":"","category":"section"},{"location":"api/api_layout/","page":"Layout","title":"Layout","text":"CurrentModule = Term.Layout","category":"page"},{"location":"api/api_layout/","page":"Layout","title":"Layout","text":"Pages   = [\"api_layout.md\"]","category":"page"},{"location":"api/api_layout/","page":"Layout","title":"Layout","text":"Modules = [Layout]","category":"page"},{"location":"api/api_layout/#Term.Layout.Padding","page":"Layout","title":"Term.Layout.Padding","text":"Padding\n\nStores information about ammount of padding.\n\n\n\n\n\n","category":"type"},{"location":"api/api_layout/#Term.Layout.PlaceHolder","page":"Layout","title":"Term.Layout.PlaceHolder","text":"mutable struct PlaceHolder <: AbstractLayoutElement\n    segments::Vector{Segment}\n    measure::Measure\nend\n\nA renderable used as a place holder when creating layouts (e.g. with grid).\n\nExamples\n\n\nprintln(PlaceHolder(25, 10))\n\n╲ ╲ ╲ ╲ ╲ ╲ ╲ ╲ ╲ ╲ ╲ ╲\n╲ ╲ ╲ ╲ ╲ ╲ ╲ ╲ ╲ ╲ ╲ ╲ \n╲ ╲ ╲ ╲ ╲ ╲ ╲ ╲ ╲ ╲ ╲ ╲\n╲ ╲ ╲ ╲ ╲ ╲ ╲ ╲ ╲ ╲ ╲ ╲ \n╲ ╲ ╲ (25 × 10) ╲ ╲ ╲ ╲\n╲ ╲ ╲ ╲ ╲ ╲ ╲ ╲ ╲ ╲ ╲ ╲ \n╲ ╲ ╲ ╲ ╲ ╲ ╲ ╲ ╲ ╲ ╲ ╲\n╲ ╲ ╲ ╲ ╲ ╲ ╲ ╲ ╲ ╲ ╲ ╲ \n╲ ╲ ╲ ╲ ╲ ╲ ╲ ╲ ╲ ╲ ╲ ╲\n╲ ╲ ╲ ╲ ╲ ╲ ╲ ╲ ╲ ╲ ╲ ╲ \n\n\n\n\n\n","category":"type"},{"location":"api/api_layout/#Term.Layout.PlaceHolder-Tuple{Int64, Int64}","page":"Layout","title":"Term.Layout.PlaceHolder","text":"PlaceHolder(\n    h::In,\n    w::Int;\n    style::String = \"dim\",\n    text::Union{Nothing,String} = nothing,\n)\n\nCreate a PlaceHolder with additional style information.\n\n\n\n\n\n","category":"method"},{"location":"api/api_layout/#Term.Layout.Spacer","page":"Layout","title":"Term.Layout.Spacer","text":"    Spacer\n\nA box of empty text with given width and height.\n\n\n\n\n\n","category":"type"},{"location":"api/api_layout/#Term.Layout.hLine","page":"Layout","title":"Term.Layout.hLine","text":"hLine\n\nA 1-line renderable made of repeated character from a Box.\n\n\n\n\n\n","category":"type"},{"location":"api/api_layout/#Term.Layout.hLine-Tuple{AbstractString}","page":"Layout","title":"Term.Layout.hLine","text":"hLine(text::AbstractString; style::Union{String, Nothing}=nothing, box::Symbol=TERM_THEME[].box)\n\nConstruct an hLine as wide as the stdout with centered text.\n\n\n\n\n\n","category":"method"},{"location":"api/api_layout/#Term.Layout.hLine-Tuple{Int64}","page":"Layout","title":"Term.Layout.hLine","text":"hLine(width::Number, style::Union{String, Nothing}; box::Symbol=TERM_THEME[].box)\n\nCreate a styled hLine of given width.\n\n\n\n\n\n","category":"method"},{"location":"api/api_layout/#Term.Layout.hLine-Tuple{Number, String}","page":"Layout","title":"Term.Layout.hLine","text":"hLine(width::Number, text::String; style::Union{String, Nothing}=nothing, box::Symbol=TERM_THEME[].box)\n\nCreates an hLine object with texte centered horizontally.\n\n\n\n\n\n","category":"method"},{"location":"api/api_layout/#Term.Layout.hLine-Tuple{Term.Renderables.AbstractRenderable}","page":"Layout","title":"Term.Layout.hLine","text":"hLine(ren::AbstractRenderable; kwargs)\n\nConstruct an hLine with same width as a renderable.\n\n\n\n\n\n","category":"method"},{"location":"api/api_layout/#Term.Layout.hLine-Tuple{}","page":"Layout","title":"Term.Layout.hLine","text":"hLine(; style::Union{String, Nothing}=nothing, box::Symbol=TERM_THEME[].box)\n\nConstruct an hLine as wide as the stdout.\n\n\n\n\n\n","category":"method"},{"location":"api/api_layout/#Term.Layout.vLine","page":"Layout","title":"Term.Layout.vLine","text":"vLine\n\nA multi-line renderable with each line made of a | to create a vertical line.\n\n\n\n\n\n","category":"type"},{"location":"api/api_layout/#Term.Layout.vLine-Tuple{Int64}","page":"Layout","title":"Term.Layout.vLine","text":"vLine(height::Number, style::Union{String, Nothing}; box::Symbol=:ROUNDED)\n\nCreate a vLine given a height and, optionally, style information.\n\n\n\n\n\n","category":"method"},{"location":"api/api_layout/#Term.Layout.vLine-Tuple{Term.Renderables.AbstractRenderable}","page":"Layout","title":"Term.Layout.vLine","text":"vLine(ren::AbstractRenderable; kwargs...)\n\nConstruct a vLine with the same height as a renderable.\n\n\n\n\n\n","category":"method"},{"location":"api/api_layout/#Term.Layout.vLine-Tuple{}","page":"Layout","title":"Term.Layout.vLine","text":"vLine(; style::Union{String, Nothing}=nothing, box::Symbol=:ROUNDED)\n\nCreate a vLine as tall as the stdout console.\n\n\n\n\n\n","category":"method"},{"location":"api/api_layout/#Term.Layout.center!-Tuple{Vararg{Union{AbstractString, Term.Renderables.AbstractRenderable}}}","page":"Layout","title":"Term.Layout.center!","text":"center!(renderables::RenderablesUnion... )\n\nIn place version of center.\n\nExamples\n\np1 = Panel(; width=25)\np2 = Panel(; width=50)\ncenter!(p1, p2)\nprint(p1/p2)\n\n             ╭───────────────────────╮             \n             ╰───────────────────────╯             \n╭────────────────────────────────────────────────╮\n╰────────────────────────────────────────────────╯\n\n\n\n\n\n","category":"method"},{"location":"api/api_layout/#Term.Layout.center-Tuple{Vararg{Union{AbstractString, Term.Renderables.AbstractRenderable}}}","page":"Layout","title":"Term.Layout.center","text":"center(renderables::RenderablesUnion... )\n\nPad two (or more) renderables so that they have the same width and they are centered.\n\nNOTE: the renderables returned  have different type and potentially different size     from the inputs\n\nExamples\n\np1 = Panel(; width=25)\np2 = Panel(; width=50)\np1, p2 = center(p1, p2)\nprint(p1/p2)\n\n             ╭───────────────────────╮             \n             ╰───────────────────────╯             \n╭────────────────────────────────────────────────╮\n╰────────────────────────────────────────────────╯\n\n\n\n\n\n","category":"method"},{"location":"api/api_layout/#Term.Layout.cvstack-Tuple{Vararg{Union{AbstractString, Term.Renderables.AbstractRenderable}}}","page":"Layout","title":"Term.Layout.cvstack","text":"lvstack(renderables::RenderablesUnion...)\n\nCenter align renderables and then vertically stack.\n\n\n\n\n\n","category":"method"},{"location":"api/api_layout/#Term.Layout.hstack-Tuple","page":"Layout","title":"Term.Layout.hstack","text":"hstack(renderables...)\n\nHorizonatlly stack a variable number of renderables.\n\n\n\n\n\n","category":"method"},{"location":"api/api_layout/#Term.Layout.hstack-Tuple{Union{AbstractString, Term.Renderables.AbstractRenderable}, Union{AbstractString, Term.Renderables.AbstractRenderable}}","page":"Layout","title":"Term.Layout.hstack","text":"hstack(r1::RenderablesUnion, r2::RenderablesUnion   )\n\nHorizontally stack two renderables to give a new renderable.\n\n\n\n\n\n","category":"method"},{"location":"api/api_layout/#Term.Layout.leftalign!-Tuple{Vararg{Union{AbstractString, Term.Renderables.AbstractRenderable}}}","page":"Layout","title":"Term.Layout.leftalign!","text":"leftalign!(renderables::RenderablesUnion...)\n\nIn place version of leftalign. \n\nExamples\n\n```julia p1 = Panel(; width=25) p2 = Panel(; width=50) leftalign!(p1, p2) print(p1/p2)\n\n╭───────────────────────╮                          ╰───────────────────────╯                          ╭────────────────────────────────────────────────╮ ╰────────────────────────────────────────────────╯\n\n\n\n\n\n","category":"method"},{"location":"api/api_layout/#Term.Layout.leftalign-Tuple{Vararg{Union{AbstractString, Term.Renderables.AbstractRenderable}}}","page":"Layout","title":"Term.Layout.leftalign","text":"leftalign(renderables::RenderablesUnion...)\n\nPad two (or more) renderables so that they have the same width and they are left-aligned.\n\nNOTE: the renderables returned  have different type and potentially different size     from the inputs\n\nExamples\n\np1 = Panel(; width=25)\np2 = Panel(; width=50)\np1, p2 = leftalign(p1, p2)\nprint(p1/p2)\n\n\n╭───────────────────────╮                         \n╰───────────────────────╯                         \n╭────────────────────────────────────────────────╮\n╰────────────────────────────────────────────────╯\n\n\n\n\n\n","category":"method"},{"location":"api/api_layout/#Term.Layout.lvstack-Tuple{Vararg{Union{AbstractString, Term.Renderables.AbstractRenderable}}}","page":"Layout","title":"Term.Layout.lvstack","text":"lvstack(renderables::RenderablesUnion...)\n\nLeft align renderables and then vertically stack.\n\n\n\n\n\n","category":"method"},{"location":"api/api_layout/#Term.Layout.pad","page":"Layout","title":"Term.Layout.pad","text":"\n\npad(text::AbstractString, left::Int = 0, right::Int = 0)\n\nPad a string by a fixed ammount to the left and to the right.\n\n\n\n\n\n","category":"function"},{"location":"api/api_layout/#Term.Layout.pad-2","page":"Layout","title":"Term.Layout.pad","text":"\n\npad(segments::AbstractVector{Segment}, left::Int = 0, right::Int = 0)\n\nPad a renderable's segments to the left and the right.\n\n\n\n\n\n","category":"function"},{"location":"api/api_layout/#Term.Layout.pad!-Tuple{Term.Renderables.AbstractRenderable, Int64, Int64}","page":"Layout","title":"Term.Layout.pad!","text":"pad!(ren::AbstractRenderable, left::Int, right::Int)\n\nIn place version for padding a renderable.\n\n\n\n\n\n","category":"method"},{"location":"api/api_layout/#Term.Layout.pad!-Tuple{Term.Renderables.AbstractRenderable}","page":"Layout","title":"Term.Layout.pad!","text":"pad!(ren::AbstractRenderable; width::Int)\n\nIn place version for padding a renderable to achieve a given width.\n\n\n\n\n\n","category":"method"},{"location":"api/api_layout/#Term.Layout.pad-Tuple{AbstractString, Int64, Symbol}","page":"Layout","title":"Term.Layout.pad","text":"pad(text::AbstractString, target_width::Int, method::Symbol)::String\n\nPad a string to width: target_width by adding empty spaces strings \" \". Where the spaces are added depends on the justification method ∈ (:left, :center, :right, :justify).\n\nExamples\n\njulia> pad(\"ciao\", 10, :left)\n\"ciao      \"\n\njulia> pad(\"ciao\", 10, :center)\n\"   ciao   \"\n\njulia> pad(\"ciao\", 10, :right)\n\"      ciao\"\n\n\n\n\n\n","category":"method"},{"location":"api/api_layout/#Term.Layout.pad-Tuple{Term.Renderables.AbstractRenderable, Int64, Int64}","page":"Layout","title":"Term.Layout.pad","text":"\n\npad(ren::AbstractRenderable, left::Int, right::Int)\n\nPad an AbstractRenderable by padding each of its segments.\n\n\n\n\n\n","category":"method"},{"location":"api/api_layout/#Term.Layout.pad-Tuple{Term.Renderables.AbstractRenderable}","page":"Layout","title":"Term.Layout.pad","text":"\n\npad(ren::AbstractRenderable; width::Int)\n\nPad a renderable to achieve a target width.\n\nnote: Note\nThe padding is added to the left and to the right as needed to achieve the target width. The resulting renderable object will be center in the target space.\n\nExample\n\njulia> pad(RenderableText(\"ciao\"); width=10)\n    ciao   \n\n\n\n\n\n","category":"method"},{"location":"api/api_layout/#Term.Layout.rightalign!-Tuple{Vararg{Union{AbstractString, Term.Renderables.AbstractRenderable}}}","page":"Layout","title":"Term.Layout.rightalign!","text":"rightalign!(renderables::RenderablesUnion... )\n\nIn place version of rightalign.\n\nExamples\n\np1 = Panel(; width=25)\np2 = Panel(; width=50)\nrightalign!(p1, p2)\nprint(p1/p2)\n\n                         ╭───────────────────────╮\n                         ╰───────────────────────╯\n╭────────────────────────────────────────────────╮\n╰────────────────────────────────────────────────╯\n\n\n\n\n\n","category":"method"},{"location":"api/api_layout/#Term.Layout.rightalign-Tuple{Vararg{Union{AbstractString, Term.Renderables.AbstractRenderable}}}","page":"Layout","title":"Term.Layout.rightalign","text":"rightalign(renderables::RenderablesUnion... )\n\nPad two (or more) renderables so that they have the same width and they are right aligned.\n\nNOTE: the renderables returned  have different type and potentially different size     from the inputs\n\nExamples\n\np1 = Panel(; width=25)\np2 = Panel(; width=50)\np1, p2 = rightalign(p1, p2)\nprint(p1/p2)\n\n                         ╭───────────────────────╮\n                         ╰───────────────────────╯\n╭────────────────────────────────────────────────╮\n╰────────────────────────────────────────────────╯\n\n\n\n\n\n","category":"method"},{"location":"api/api_layout/#Term.Layout.rvstack-Tuple{Vararg{Union{AbstractString, Term.Renderables.AbstractRenderable}}}","page":"Layout","title":"Term.Layout.rvstack","text":"lvstack(renderables::RenderablesUnion...)\n\nRight align renderables and then vertically stack.\n\n\n\n\n\n","category":"method"},{"location":"api/api_layout/#Term.Layout.vertical_pad","page":"Layout","title":"Term.Layout.vertical_pad","text":"vertical_pad(text::AbstractString, above::Int = 0, below::Int = 0)\n\nVertical pad a string by a fixed ammount to above and below.\n\n\n\n\n\n","category":"function"},{"location":"api/api_layout/#Term.Layout.vertical_pad-2","page":"Layout","title":"Term.Layout.vertical_pad","text":"vertical_pad(segments::AbstractVector{Segment}, above::Int = 0, below::Int = 0)\n\nPad a renderable's segments to the above and the below.\n\n\n\n\n\n","category":"function"},{"location":"api/api_layout/#Term.Layout.vertical_pad!-Tuple{Term.Renderables.AbstractRenderable, Int64, Int64}","page":"Layout","title":"Term.Layout.vertical_pad!","text":"verti0cal_pad!(ren::AbstractRenderable, above::Int, below::Int)\n\nIn place version for vertically padding a renderable.\n\n\n\n\n\n","category":"method"},{"location":"api/api_layout/#Term.Layout.vertical_pad!-Tuple{Term.Renderables.AbstractRenderable}","page":"Layout","title":"Term.Layout.vertical_pad!","text":"pad!(ren::AbstractRenderable; width::Int)\n\nIn place version for padding a renderable to achieve a given width.\n\n\n\n\n\n","category":"method"},{"location":"api/api_layout/#Term.Layout.vertical_pad-Tuple{AbstractString, Int64, Symbol}","page":"Layout","title":"Term.Layout.vertical_pad","text":"verticalpad(text, targetheight::Int, method::Symbol)::String\n\nVertically pad a string to height: target_height by adding empty strings above/below \" \". Where the spaces are added depends on the justification method ∈ (:top, :center, :bottom).\n\n\n\n\n\n","category":"method"},{"location":"api/api_layout/#Term.Layout.vertical_pad-Tuple{Term.Renderables.AbstractRenderable, Int64, Int64}","page":"Layout","title":"Term.Layout.vertical_pad","text":"vertical_pad(ren::AbstractRenderable, above::Int, below::Int)\n\nPad a renderable, vertically.\n\n\n\n\n\n","category":"method"},{"location":"api/api_layout/#Term.Layout.vertical_pad-Tuple{Term.Renderables.AbstractRenderable}","page":"Layout","title":"Term.Layout.vertical_pad","text":"vertical_pad(ren::AbstractRenderable; height::Int)\n\nVertical pad a renderable to achieve a target height.\n\n\n\n\n\n","category":"method"},{"location":"api/api_layout/#Term.Layout.vstack-Tuple{Vararg{Union{AbstractString, Term.Renderables.AbstractRenderable}}}","page":"Layout","title":"Term.Layout.vstack","text":"vstack(renderables...)\n\nVertically stack a variable number of renderables to give a new renderable\n\n\n\n\n\n","category":"method"},{"location":"ren/intro/#RenIntro","page":"Renderables","title":"Renderables","text":"","category":"section"},{"location":"ren/intro/","page":"Renderables","title":"Renderables","text":"These next few page dive deeper into each specific type of renderable, enjoy!","category":"page"},{"location":"ren/layout_rens/#Layout-renderables","page":"Layout renderables","title":"Layout renderables","text":"","category":"section"},{"location":"ren/layout_rens/","page":"Layout renderables","title":"Layout renderables","text":"In this section we'll look at a few renderable types that are useful layout elements: they can be used to insert lines to demarcate different section, create some space or even as place holders for when you want to create a layout but don't have some content yet. ","category":"page"},{"location":"ren/layout_rens/","page":"Layout renderables","title":"Layout renderables","text":"note: Layout syntax\nHere we make use of the layout operators * and / to horizontally and vertically stack renderables. Have a look at the Layout section for more details!","category":"page"},{"location":"ren/layout_rens/#Spacer","page":"Layout renderables","title":"Spacer","text":"","category":"section"},{"location":"ren/layout_rens/","page":"Layout renderables","title":"Layout renderables","text":"Spacer creates a box of empty text with a given width and height. This can be useful for instance if you're stacking two other renderables but want some space between them:","category":"page"},{"location":"ren/layout_rens/","page":"Layout renderables","title":"Layout renderables","text":"import Term: Panel\nimport Term.Layout: Spacer\n\np = Panel(height=3, width=10)\nspace = Spacer(3, 5)\nprint(p * space * p)\nprint(p * p)","category":"page"},{"location":"ren/layout_rens/#Vertical-line","page":"Layout renderables","title":"Vertical line","text":"","category":"section"},{"location":"ren/layout_rens/","page":"Layout renderables","title":"Layout renderables","text":"vLine does one simple thing: creates a vertical line. You can style it and like for Panel you can use different Boxes to obtain different looks:","category":"page"},{"location":"ren/layout_rens/","page":"Layout renderables","title":"Layout renderables","text":"\nimport Term.Layout: vLine\nspace = Spacer(10, 5)\nvLine(10; style=\"red\") * space * vLine(10; style=\"blue\") * space * vLine(10; style=\"green\", box=:DOUBLE)","category":"page"},{"location":"ren/layout_rens/","page":"Layout renderables","title":"Layout renderables","text":"and you can pass another Renderable as argument to create a line as tall as it:","category":"page"},{"location":"ren/layout_rens/","page":"Layout renderables","title":"Layout renderables","text":"import Term: Panel\np = Panel(height=3, width=15)\nl = vLine(p)\nl * p * l","category":"page"},{"location":"ren/layout_rens/#Horizontal-line","page":"Layout renderables","title":"Horizontal line","text":"","category":"section"},{"location":"ren/layout_rens/","page":"Layout renderables","title":"Layout renderables","text":"Similar to vLine (surprising I know), but horizontal:","category":"page"},{"location":"ren/layout_rens/","page":"Layout renderables","title":"Layout renderables","text":"import Term.Layout: hLine\n\nh1 = hLine(10; style=\"red\")\nh2 = hLine(10; style=\"blue\")\nh3 = hLine(p; style=\"green\", box=:DOUBLE)\nh1 / h2 / h3 / p","category":"page"},{"location":"ren/layout_rens/","page":"Layout renderables","title":"Layout renderables","text":"But! You can use some text to add a \"title\" to the center of your line:","category":"page"},{"location":"ren/layout_rens/","page":"Layout renderables","title":"Layout renderables","text":"\nhLine(100, \"{bold white}wow{/bold white}\")","category":"page"},{"location":"ren/layout_rens/","page":"Layout renderables","title":"Layout renderables","text":"which can be nice some times. ","category":"page"},{"location":"ren/layout_rens/#PlaceHolder","page":"Layout renderables","title":"PlaceHolder","text":"","category":"section"},{"location":"ren/layout_rens/","page":"Layout renderables","title":"Layout renderables","text":"Does what it says on the tin. It's a convenience thing to create a renderable with a given size that you can use while you think about how to create a layout:","category":"page"},{"location":"ren/layout_rens/","page":"Layout renderables","title":"Layout renderables","text":"import Term.Layout: PlaceHolder\n\np1 = PlaceHolder(10, 35)\np2 = PlaceHolder(10, 35; style=\"red\")\np3 = PlaceHolder(10, 75; style=\"blue\")\n\n(p1 * \" \"^5 * p2) / \" \" / p3","category":"page"},{"location":"ren/layout_rens/","page":"Layout renderables","title":"Layout renderables","text":"For more complex layout situations, Grid and Compositor are your friends. These are a bit more involved so we'll describe them more in detail in a dedicated Layout section below. ","category":"page"},{"location":"adv/markdown/#Markdown","page":"Markdown","title":"Markdown","text":"","category":"section"},{"location":"adv/markdown/","page":"Markdown","title":"Markdown","text":"If you've had a loot at the REPR section, you might have noticed that Term is doing some fancy print out of the functions docstrings. That's because docstrings in Julia are represented as Markdown text and Term can parse it nicely!","category":"page"},{"location":"adv/markdown/","page":"Markdown","title":"Markdown","text":"Let's have a look.","category":"page"},{"location":"adv/markdown/","page":"Markdown","title":"Markdown","text":"import Term.Consoles: Console, enable, disable # hide\ncon = Console(60) |> enable #hide\nimport Term: tprintln\nusing Term.TermMarkdown\nusing Markdown\n\nmymd = md\"\"\"\n# This is a Markdown file\n\nThis is a paragraph of text.\nThis is a list:\n* one\n* two\n\"\"\"","category":"page"},{"location":"adv/markdown/","page":"Markdown","title":"Markdown","text":"and now in Term:","category":"page"},{"location":"adv/markdown/","page":"Markdown","title":"Markdown","text":"import Term: tprintln, tprint\ntprintln(parse_md(mymd))","category":"page"},{"location":"adv/markdown/","page":"Markdown","title":"Markdown","text":"or more simply:","category":"page"},{"location":"adv/markdown/","page":"Markdown","title":"Markdown","text":"tprint(mymd)","category":"page"},{"location":"adv/markdown/","page":"Markdown","title":"Markdown","text":"Anything that goes into a Julia's Markdown object can be rendered nicely.","category":"page"},{"location":"adv/markdown/#Maths","page":"Markdown","title":"Maths","text":"","category":"section"},{"location":"adv/markdown/","page":"Markdown","title":"Markdown","text":"tprint(md\"\"\"\nYou markdown can include in-line latex ``\\sqrt(\\gamma)`` and maths in a new line too:\n\n\n!!! warning\n    this is where you'd put multi-line math, but it doesn't work in Documenter - sorry.\n    Have a go in your own REPL!\n\"\"\")\n","category":"page"},{"location":"adv/markdown/#Code","page":"Markdown","title":"Code","text":"","category":"section"},{"location":"adv/markdown/","page":"Markdown","title":"Markdown","text":"This is what you'd do to show code:","category":"page"},{"location":"adv/markdown/","page":"Markdown","title":"Markdown","text":"\ntprint(\"\"\"\n\n\"this function is a bit pointless\"\nfunction my_useless_fn(x)\n    println(\"I don't do much!\")\n    return x\nend\n\n\"\"\")","category":"page"},{"location":"adv/markdown/","page":"Markdown","title":"Markdown","text":"tprint(md\"\"\"\n\n!!! warning\n    this is where you'd put multi-line code, but it doesn't work in Documenter - sorry.\n    Have a go in your own REPL!\n\"\"\")","category":"page"},{"location":"adv/markdown/#Quotes-and-admonitions","page":"Markdown","title":"Quotes and admonitions","text":"","category":"section"},{"location":"adv/markdown/","page":"Markdown","title":"Markdown","text":"tprint(md\"\"\"\nYou can use \"quotes\" to highlight a section:\n\n> Multi-line quotes can be helpful to make a \n> paragraph stand out, so that users won't miss it!\n\nbut if you really need to grab someone's attention, use admonitions:\n\n!!! note\n    You can use different levels\n\n!!! warning\n    to send different messages\n\n!!! danger\n    to your reader\n\n!!! tip \"Wow!\"\n    Turns out that admonitions can be pretty useful!\n    What will you use them for?\n\"\"\")","category":"page"},{"location":"adv/markdown/#Lists","page":"Markdown","title":"Lists","text":"","category":"section"},{"location":"adv/markdown/","page":"Markdown","title":"Markdown","text":"tprint(md\"\"\"\nOf course you can have classic lists:\n* item one\n* item two\n* And a sublist:\n    + sub-item one\n    + sub-item two\n\nand ordered lists too:\n1. item one\n2. item two\n3. item three\n\n\"\"\")","category":"page"},{"location":"adv/markdown/#Tables","page":"Markdown","title":"Tables","text":"","category":"section"},{"location":"adv/markdown/","page":"Markdown","title":"Markdown","text":"tprint(md\"\"\"\n!!! note \"Tables\"\n    You can use the [Markdown table syntax](https://www.markdownguide.org/extended-syntax/#tables)\n    to insert tables - Term.jl will convert them to Table object!\n\n| Term | handles | tables|\n|:---------- | ---------- |:------------:|\n| Row `1`    | Column `2` |              |\n| *Row* 2    | **Row** 2  | Column ``3`` |\n\"\"\")\n\ndisable(con)  # hide","category":"page"},{"location":"adv/markdown/","page":"Markdown","title":"Markdown","text":"and more (links, footnotes, headers of different levels, etc.)","category":"page"},{"location":"api/api_renderables/#Renderables","page":"Renderables","title":"Renderables","text":"","category":"section"},{"location":"api/api_renderables/","page":"Renderables","title":"Renderables","text":"CurrentModule = Term.Renderables","category":"page"},{"location":"api/api_renderables/","page":"Renderables","title":"Renderables","text":"Pages   = [\"api_renderables.md\"]","category":"page"},{"location":"api/api_renderables/","page":"Renderables","title":"Renderables","text":"Modules = [Renderables]","category":"page"},{"location":"api/api_renderables/#Term.Renderables.AbstractRenderable","page":"Renderables","title":"Term.Renderables.AbstractRenderable","text":"AbstractRenderable\n\n\n\n\n\n","category":"type"},{"location":"api/api_renderables/#Term.Renderables.Renderable-Tuple{AbstractString}","page":"Renderables","title":"Term.Renderables.Renderable","text":"Renderable(\n    str::String; width::Union{Nothing,Int} = nothing\n)\n\nConvenience method to construct a RenderableText\n\n\n\n\n\n","category":"method"},{"location":"api/api_renderables/#Term.Renderables.RenderableText-Tuple{AbstractString}","page":"Renderables","title":"Term.Renderables.RenderableText","text":"RenderableText(text::String; width::Union{Nothing, Int, Symbol}=nothing)\n\nConstruct a RenderableText out of a string.\n\nThe text is resized to fit the given width. Optionally justify  can be used to set the text justification style ∈ (:left, :center, :right, :justify).\n\n\n\n\n\n","category":"method"},{"location":"api/api_renderables/#Term.Renderables.RenderableText-Tuple{RenderableText}","page":"Renderables","title":"Term.Renderables.RenderableText","text":"RenderableText(rt::RenderableText; width::Union{Nothing,Int} = nothing)\n\nConstruct a RenderableText by possibly re-shaping a RenderableText\n\n\n\n\n\n","category":"method"},{"location":"api/api_renderables/#Base.print-Tuple{IO, Term.Renderables.AbstractRenderable}","page":"Renderables","title":"Base.print","text":"print(io::IO, renderable::AbstractRenderable)\n\nPrint a renderable to an IO\n\n\n\n\n\n","category":"method"},{"location":"api/api_renderables/#Base.show-Tuple{IO, MIME{Symbol(\"text/plain\")}, Term.Renderables.AbstractRenderable}","page":"Renderables","title":"Base.show","text":"show(io::IO, mime::MIME\"text/plain\", renderable::AbstractRenderable)\n\nShow a renderable and some information about its shape.\n\n\n\n\n\n","category":"method"},{"location":"api/api_renderables/#Base.show-Tuple{IO, Term.Renderables.AbstractRenderable}","page":"Renderables","title":"Base.show","text":"show(io::IO, renderable::AbstractRenderable)\n\nShow a renderable.\n\n\n\n\n\n","category":"method"},{"location":"api/api_renderables/#Base.string-Tuple{Term.Renderables.AbstractRenderable}","page":"Renderables","title":"Base.string","text":"Base.string(r::AbstractRenderable)::String\n\nCreates a string representation of a renderable\n\n\n\n\n\n","category":"method"},{"location":"api/api_renderables/#Term.Renderables.trim_renderable-Tuple{Term.Renderables.AbstractRenderable, Int64}","page":"Renderables","title":"Term.Renderables.trim_renderable","text":"trim_renderable(ren::Union{String, AbstractRenderable}, width::Int)\n\nTrim a string or renderable to a max width.\n\n\n\n\n\n","category":"method"},{"location":"api/api_panels/#Panels","page":"Panels","title":"Panels","text":"","category":"section"},{"location":"api/api_panels/","page":"Panels","title":"Panels","text":"CurrentModule = Term.Panels","category":"page"},{"location":"api/api_panels/","page":"Panels","title":"Panels","text":"Pages   = [\"api_panels.md\"]","category":"page"},{"location":"api/api_panels/","page":"Panels","title":"Panels","text":"Modules = [Panels]","category":"page"},{"location":"api/api_panels/#Term.Panels.Panel","page":"Panels","title":"Term.Panels.Panel","text":"Panel\n\nRenderable with a panel surrounding some content:\n\n    ╭──────────╮\n    │ my panel │\n    ╰──────────╯\n\n\n\nWhen constructing a Panel, several keyword arguments can be used to set its appearance:\n\nbox::Symbol sets the Box type for the Panel's border\nstyle::String  sets the box's style (e.g., color)\ntitle::Union{String,Nothing}  sets the Panel's title\ntitle_style::Union{Nothing,String} sets the title's style\ntitle_justify::Symbol     sets the location of the title\nsubtitle::Union{String,Nothing}  sets the Panel's subtitle\nsubtitle_style::Union{Nothing,String}  sets the subtitle's style\nsubtitle_justify::Symbol  sets the location of the subtitle\njustify::Symbol sets text's alignment (:left, :rigth, :center, :justify)\n\n\n\n\n\n","category":"type"},{"location":"api/api_panels/#Term.Panels.Panel-Tuple{Union{AbstractString, Term.Renderables.AbstractRenderable}, Val{false}, Term.Layout.Padding}","page":"Panels","title":"Term.Panels.Panel","text":"\n\nPanel(\n    content::Union{AbstractString,AbstractRenderable},\n    ::Val{false},\n    padding::Padding;\n    height::Union{Nothing,Int} = nothing,\n    width::Int = 80,\n    kwargs...,\n)\n\nConstruct a Panel fitting content to it.\n\ntip: Tip\nContent that is too large to fit in the given width will be trimmed.  To avoid trimming, set fit=true when calling panel. \n\n\n\n\n\n","category":"method"},{"location":"api/api_panels/#Term.Panels.Panel-Tuple{Union{AbstractString, Term.Renderables.AbstractRenderable}, Val{true}, Term.Layout.Padding}","page":"Panels","title":"Term.Panels.Panel","text":"\n\nPanel(\n    content::Union{AbstractString,AbstractRenderable},\n    ::Val{true},\n    padding::Padding;\n    height::Union{Nothing,Int} = nothing,\n    width::Union{Nothing,Int} = nothing,\n    trim::Bool = true,\n    kwargs...,\n)\n\nConstruct a Panel fitting the content's width.\n\nwarning: Warning\nIf the content is larger than the console terminal's width, it will get trimmed to avoid overflow, unless trim=false is given.\n\n\n\n\n\n","category":"method"},{"location":"api/api_panels/#Term.Panels.Panel-Tuple{Union{AbstractString, Term.Renderables.AbstractRenderable}}","page":"Panels","title":"Term.Panels.Panel","text":"\n\nPanel(\n    content::Union{AbstractString,AbstractRenderable};\n    fit::Bool = false,\n    padding::Union{Nothing,Padding,NTuple} = nothing,\n    kwargs...,\n)\n\nConstruct a Panel around an AbstractRenderable or AbstractString.\n\nThis is the main Panel-creating function, it dispatches to other methods based on the value of fit to either fith the Panel to its content or vice versa.\n\nkwargs can be used to set various aspects of the Panel's appearance like the presence and style of titles, box type etc... see render below.\n\n\n\n\n\n","category":"method"},{"location":"api/api_panels/#Term.Panels.Panel-Tuple{Vector{Union{AbstractString, Term.Renderables.AbstractRenderable}}}","page":"Panels","title":"Term.Panels.Panel","text":"Panel(renderables; kwargs...)\n\nPanel constructor for creating a panel out of multiple renderables at once.\n\n\n\n\n\n","category":"method"},{"location":"api/api_panels/#Term.Panels.Panel-Tuple{}","page":"Panels","title":"Term.Panels.Panel","text":"\n\nPanel(; \n    fit::Bool = false,\n    height::Int = 2,\n    width::Int = 80,\n    padding::Union{Vector,Padding,NTuple} = Padding(0, 0, 0, 0),\n    kwargs...,  \n)\n\nConstruct a Panel with no content.\n\nExamples\n\njulia> Panel(height=5, width=10)\n╭────────╮\n│        │\n│        │\n│        │\n╰────────╯\n\njulia> Panel(height=3, width=5)\n╭───╮\n│   │\n╰───╯\n\n\n\n\n\n","category":"method"},{"location":"api/api_panels/#Term.Panels.content_as_renderable-NTuple{5, Any}","page":"Panels","title":"Term.Panels.content_as_renderable","text":"content_as_renderable(content, width, Δw, justify)\n\nConvert any input content to a renderable\n\n\n\n\n\n","category":"method"},{"location":"api/api_panels/#Term.Panels.fix_layout_width-Tuple{Expr, Int64}","page":"Panels","title":"Term.Panels.fix_layout_width","text":"fix_layout_width(panel_call::Expr, depth::Int)::Expr\n\nGo through an Expr with a :call to a Panel and add a keyword argument expression with the correct width (using parse_layout_args). Also go through any other argument to the call to fix inner panels' width.\n\n\n\n\n\n","category":"method"},{"location":"api/api_panels/#Term.Panels.makecontent_line-NTuple{8, Any}","page":"Panels","title":"Term.Panels.makecontent_line","text":"makecontent_line(cline, panel_measure, justify, background, padding, left, right)::Segment\n\nCreate a Panel's content line.\n\n\n\n\n\n","category":"method"},{"location":"api/api_panels/#Term.Panels.parse_layout_args","page":"Panels","title":"Term.Panels.parse_layout_args","text":"function parse_layout_args end\n\nParse the arguments of a Expr(:call, :Panel, ...) to  add a keyword argument to fix the panel's width.  A few diferent menthods are defined to handle different combinations of args/kwargs for the Panel call.\n\n\n\n\n\n","category":"function"},{"location":"api/api_panels/#Term.Panels.parse_layout_args-Tuple{Any, Any, Vararg{Any}}","page":"Panels","title":"Term.Panels.parse_layout_args","text":"Panel's args did not start with an Expr (e.g. a string) \n\n\n\n\n\n","category":"method"},{"location":"api/api_panels/#Term.Panels.parse_layout_args-Tuple{Any, Expr, Vararg{Any}}","page":"Panels","title":"Term.Panels.parse_layout_args","text":"Panels's first argument was an Expr, nested content! \n\n\n\n\n\n","category":"method"},{"location":"api/api_panels/#Term.Panels.parse_layout_args-Tuple{Any}","page":"Panels","title":"Term.Panels.parse_layout_args","text":"Panel had no args/kwargs \n\n\n\n\n\n","category":"method"},{"location":"api/api_panels/#Term.Panels.render-Tuple{Any}","page":"Panels","title":"Term.Panels.render","text":"render(\n    content;\n    box::Symbol = :ROUNDED,\n    style::String = \"default\",\n    title::Union{String,Nothing} = nothing,\n    title_style::Union{Nothing,String} = nothing,\n    title_justify::Symbol = :left,\n    subtitle::Union{String,Nothing} = nothing,\n    subtitle_style::Union{Nothing,String} = nothing,\n    subtitle_justify::Symbol = :left,\n    justify::Symbol = :left,\n    text_justify::Bool=false,\n    panel_measure::Measure,\n    content_measure::Measure,\n    Δw::Int,\n    Δh::Int,\n    padding::Padding,\n)::Panel\n\nConstruct a Panel's content.\n\n\n\n\n\n","category":"method"},{"location":"api/api_panels/#Term.Panels.@nested_panels-Tuple{Any}","page":"Panels","title":"Term.Panels.@nested_panels","text":"macro nested_panels(layout_call)\n\nMacro to automate layout of multiple nested Panel. The width of the panels is automatically adjusted based on the depth of eeach nested level.\n\nUses fix_layout_width recursively to add a keyword argument width to each Panel.\n\n\n\n\n\n","category":"macro"},{"location":"ren/text/#RtextDoc","page":"RenderableText","title":"RenderableText","text":"","category":"section"},{"location":"ren/text/","page":"RenderableText","title":"RenderableText","text":"RenderableText, what is it? Exactly what the name says: a renderable that stores a bit of text:","category":"page"},{"location":"ren/text/","page":"RenderableText","title":"RenderableText","text":"using Term # hide\nrend = RenderableText(\"\"\"\n{bold red}Woah, my first {yellow italic}`Renderable`!\n\"\"\")\nprint(rend)","category":"page"},{"location":"ren/text/","page":"RenderableText","title":"RenderableText","text":"Nothing special here. You'll notice that RenderableText automatically applies style information though. Also, when we were just styling strings before we had to use tprint instead of the normal print function to get our styled output. Well no more! Renderable objects work well with print so you can drop that t (when printed renderables print their Segmens remember? Segments already store style information). ","category":"page"},{"location":"ren/text/","page":"RenderableText","title":"RenderableText","text":"Now, do we really need a whole new type just to print a bit of text? Of course not, but RenderableText does more than that!","category":"page"},{"location":"ren/text/","page":"RenderableText","title":"RenderableText","text":"import Term: RenderableText\n\nprint(RenderableText(\",\"^100; width=25))\nprint(\"\\n\"^2)\nprint(RenderableText(\",\"^100; width=50))","category":"page"},{"location":"ren/text/","page":"RenderableText","title":"RenderableText","text":"magic! When we pass a width argument RenderableText reshapes our input text to the desired width! As you can imagine, when you're creating a layout made up of multiple elements, you want to be able to control the width of each element, so here you go! ","category":"page"},{"location":"ren/text/","page":"RenderableText","title":"RenderableText","text":"Admittedly this is not huge, but it can come in handy sometimes. More importantly, the behavior of RenderableText also give you an idea of what happens to your strings when you put them in a Panel or TextBox renderable, so let's look at them!","category":"page"},{"location":"layout/layout/#Layout","page":"Layout","title":"Layout","text":"","category":"section"},{"location":"layout/layout/","page":"Layout","title":"Layout","text":"Okay, we've seen how you can create style text in various ways and that there's a number of Renderables we can use to display different kinds of contents.  Now, for really cool displays you want to have multiple elements next to each other in a meaningful layout. Here we'll get into the tricks to get layouts of multiple renderables up and running. ","category":"page"},{"location":"api/api_boxes/#Boxes","page":"Boxes","title":"Boxes","text":"","category":"section"},{"location":"api/api_boxes/","page":"Boxes","title":"Boxes","text":"CurrentModule = Term.Boxes","category":"page"},{"location":"api/api_boxes/","page":"Boxes","title":"Boxes","text":"Pages   = [\"api_boxes.md\"]","category":"page"},{"location":"api/api_boxes/","page":"Boxes","title":"Boxes","text":"Modules = [Boxes]","category":"page"},{"location":"api/api_boxes/#Term.Boxes.Box","page":"Boxes","title":"Term.Boxes.Box","text":"Box\n\nDefines characters to render boxes.\n\nRow names:\n\n┌─┬┐ top │ ││ head ├─┼┤ headrow │ ││ mid ├─┼┤ row ├─┼┤ footrow │ ││ foot └─┴┘ bottom\n\neach row is an instance of BoxLine\n\n\n\n\n\n","category":"type"},{"location":"api/api_boxes/#Term.Boxes.Box-Tuple{String, String}","page":"Boxes","title":"Term.Boxes.Box","text":"Box(string)\n\nConstruct a Box objet out of a box string.\n\n\n\n\n\n","category":"method"},{"location":"api/api_boxes/#Term.Boxes.BoxLine","page":"Boxes","title":"Term.Boxes.BoxLine","text":"BoxLine\n\nStores the characters for a line of a Box object.\n\n\n\n\n\n","category":"type"},{"location":"api/api_boxes/#Term.Boxes.fit-Tuple{Term.Boxes.Box, Vector{Int64}}","page":"Boxes","title":"Term.Boxes.fit","text":"fit(box::Box, widths::Vector{Int})::String\n\nCreates a box.\n\nThe box has one of each level type with columns widths specified by a vector of widhts.\n\n\n\n\n\n","category":"method"},{"location":"api/api_boxes/#Term.Boxes.get_lrow-Tuple{Term.Boxes.Box, Int64, Symbol}","page":"Boxes","title":"Term.Boxes.get_lrow","text":"get_lrow(box::Box, width::Int, level::Symbol)::String\n\nGet a box's row's left part (no righ char)\n\nGet a box's row's right part (no left char) See also get_row, get_rrow.\n\n\n\n\n\n","category":"method"},{"location":"api/api_boxes/#Term.Boxes.get_row-Tuple{Term.Boxes.Box, Int64, Symbol}","page":"Boxes","title":"Term.Boxes.get_row","text":"get_row(box::Box, width::Int, level::Symbol)::String\n\nGet a box's row of given width.\n\n\n\n\n\n","category":"method"},{"location":"api/api_boxes/#Term.Boxes.get_row-Tuple{Term.Boxes.Box, Vector{Int64}, Symbol}","page":"Boxes","title":"Term.Boxes.get_row","text":"get_row(box, [1, 2, 3], :row)\n\nGets characters for a row of a Box object.\n\nThe level Symbol can be used to specify the box level (:top, :footer...). The total width will be the sum of the widths +2\n\n\n\n\n\n","category":"method"},{"location":"api/api_boxes/#Term.Boxes.get_rrow-Tuple{Term.Boxes.Box, Int64, Symbol}","page":"Boxes","title":"Term.Boxes.get_rrow","text":"get_rrow(box::Box, width::Int, level::Symbol)::String\n\nGet a box's row's right part (no left char) See also get_row, get_lrow.\n\n\n\n\n\n","category":"method"},{"location":"api/api_boxes/#Term.Boxes.get_title_row-Tuple{Symbol, Any, Union{Nothing, String}}","page":"Boxes","title":"Term.Boxes.get_title_row","text":"gettitlerow(row::Symbol, box::Box, title::Union{Nothing, AbstractString}; <keyword arguments>)\n\nCreate a box row with a title string.\n\nCan create both titles in the top and bottom row to produce subtitles.\n\n#Arguments:\n\nwidth::Int: width of line\nstyle::String: style of line\ntitle_style::String: style of title string\njustify::Symbol=:left: position of title string\n\nSee also get_row.\n\n\n\n\n\n","category":"method"},{"location":"api/api_tprint/#Tprint","page":"Tprint","title":"Tprint","text":"","category":"section"},{"location":"api/api_tprint/","page":"Tprint","title":"Tprint","text":"CurrentModule = Term.Tprint","category":"page"},{"location":"api/api_tprint/","page":"Tprint","title":"Tprint","text":"Pages   = [\"api_tprint.md\"]","category":"page"},{"location":"api/api_tprint/","page":"Tprint","title":"Tprint","text":"Modules = [Tprint]","category":"page"},{"location":"api/api_tprint/#Term.Tprint.tprint","page":"Tprint","title":"Term.Tprint.tprint","text":"tprint\n\nSimilar to standard lib's print function but with added styling functionality\n\ntip: highlighting\nSet highlight=true to automatically highlight the output.\n\n\n\n\n\n","category":"function"},{"location":"api/api_tprint/#Term.Tprint.tprint-Tuple{IO, AbstractString}","page":"Tprint","title":"Term.Tprint.tprint","text":"\n\ntprint(x::AbstractString)\n\nApply style to a string and print it\n\n\n\n\n\n","category":"method"},{"location":"api/api_tprint/#Term.Tprint.tprint-Tuple{IO, Term.Renderables.AbstractRenderable}","page":"Tprint","title":"Term.Tprint.tprint","text":"\n\ntprint(x::AbstractRenderable)\n\nPrint an AbstractRenderable.\n\nEquivalent to print(x)\n\n\n\n\n\n","category":"method"},{"location":"api/api_dendograms/#Dendograms","page":"Dendograms","title":"Dendograms","text":"","category":"section"},{"location":"api/api_dendograms/","page":"Dendograms","title":"Dendograms","text":"CurrentModule = Term.Dendograms","category":"page"},{"location":"api/api_dendograms/","page":"Dendograms","title":"Dendograms","text":"Pages   = [\"api_dendograms.md\"]","category":"page"},{"location":"api/api_dendograms/","page":"Dendograms","title":"Dendograms","text":"Modules = [Dendograms]","category":"page"},{"location":"api/api_dendograms/#Term.Dendograms.Dendogram","page":"Dendograms","title":"Term.Dendograms.Dendogram","text":"Dendogram <: AbstractRenderable\n\nA Dendogram tree renderable.\n\n\n\n\n\n","category":"type"},{"location":"api/api_dendograms/#Term.Dendograms.Dendogram-Tuple{Any, Vector}","page":"Dendograms","title":"Term.Dendograms.Dendogram","text":"Dendogram(head, args::Vector; first_arg=nothing, pretitle=nothing)\n\nConstruct a single Dendogram.\n\nConstruct a dendogram with one head node (head) and any number of leaves.\n\nfirst_arg is used to create dendograms for Expr objects and gives special status to an expression's first argument which gets printed with the head. pretitle is used to create dendograms for Expr, pretitle is insrted as  three Segments (a string and an upward arrow) before the head of the dendogram.\n\n\n\n\n\n","category":"method"},{"location":"api/api_dendograms/#Term.Dendograms.Dendogram-Tuple{Expr}","page":"Dendograms","title":"Term.Dendograms.Dendogram","text":"Dendogram(e::Expr; pretitle=nothing)\n\nCreate a Dendogram representation for an Expr.  For expressions whose arguments are themselves Expr objects, dendograms are created recursively. In the end all dendograms are linked using link to create a single dendogram object (possibly nested).\n\npretitle is used to create dendograms for Expr, pretitle is insrted as  three Segments (a string and an upward arrow) before the head of the dendogram.\n\n\n\n\n\n","category":"method"},{"location":"api/api_dendograms/#Term.Dendograms.Leaf","page":"Dendograms","title":"Term.Dendograms.Leaf","text":"Leaf <: AbstractRenderable\n\nThe terminal element of a Dendogram.\n\n\n\n\n\n","category":"type"},{"location":"api/api_dendograms/#Term.Dendograms.Leaf-Tuple{Any}","page":"Dendograms","title":"Term.Dendograms.Leaf","text":"Leaf(leaf)\n\nConstruct a Leaf out of any object.\n\n\n\n\n\n","category":"method"},{"location":"api/api_dendograms/#Term.Dendograms.adjust_width-Tuple{Any, Any}","page":"Dendograms","title":"Term.Dendograms.adjust_width","text":"adjust_width(x, y)::Int\n\nWidth correction factor.\n\nWhen creating a link between dendograms, the width of the spacing between branches of the dendogram line needs to be adjusted depending on the type (Leaf or Dendogram) of the line.\n\n\n\n\n\n","category":"method"},{"location":"api/api_dendograms/#Term.Dendograms.link-Tuple","page":"Dendograms","title":"Term.Dendograms.link","text":"link(dendos...; title=\"\", shifttitle=false, pretitle=nothing)::Dendogram\n\nLink a variable number of Dendogram and Leaf objects in a new Dendogram.\n\nCreate a Dendogram whose leaves are other leaves and dendograms.  This is done carefully to ensure that all spacings are correct and text is aligned as much as possible. \n\nAnnoyingly, the code is very similar to that of Dendogram but different enough that it can't be refactored into single functions.\n\n\n\n\n\n","category":"method"},{"location":"api/api_dendograms/#Term.Dendograms.replace_line_midpoint-Tuple{String}","page":"Dendograms","title":"Term.Dendograms.replace_line_midpoint","text":"replace_line_midpoint(line::String; widths=nothing)\n\nReplace the mid character of a dendogram tree line with a vertical line for the title.\n\nIf the mid character is also the location of a branch (one of the entries in widths), then use the appropriate double branching character.\n\n\n\n\n\n","category":"method"},{"location":"api/api_trees/#Trees","page":"Trees","title":"Trees","text":"","category":"section"},{"location":"api/api_trees/","page":"Trees","title":"Trees","text":"CurrentModule = Term.Trees","category":"page"},{"location":"api/api_trees/","page":"Trees","title":"Trees","text":"Pages   = [\"api_trees.md\"]","category":"page"},{"location":"api/api_trees/","page":"Trees","title":"Trees","text":"Modules = [Trees]","category":"page"},{"location":"api/api_trees/#Term.Trees.Leaf","page":"Trees","title":"Term.Trees.Leaf","text":"Leaf\n\nEnd items in a Tree. No sub-trees.\n\n\n\n\n\n","category":"type"},{"location":"api/api_trees/#Term.Trees.Tree","page":"Trees","title":"Term.Trees.Tree","text":"Tree\n\nA tree is composed of nodes (other trees) and leaves (end items). It renders as a hierarchical structure with lines (guides) connecting the various elements\n\n\n\n\n\n","category":"type"},{"location":"api/api_trees/#Term.Trees.Tree-Tuple{DataType}","page":"Trees","title":"Term.Trees.Tree","text":"Tree(T::DataType)::Tree\n\nConstruct a Tree visualization of T's types hierarchy\n\n\n\n\n\n","category":"method"},{"location":"api/api_trees/#Term.Trees.Tree-Tuple{Union{AbstractDict, Vector, Pair}}","page":"Trees","title":"Term.Trees.Tree","text":"Tree(data::Union{AbstractDict, Pair}; level=0, title::String=\"tree\", kwargs...)\n\nConstruct a Tree out of a Dict or OrderedDict. Recursively handle nested Dicts.\n\n\n\n\n\n","category":"method"},{"location":"api/api_trees/#Term.Trees.TreeGuides","page":"Trees","title":"Term.Trees.TreeGuides","text":"TreeGuides\n\nStore strings to make up a Tree's guides (the line elements showing connections).\n\n\n\n\n\n","category":"type"},{"location":"api/api_trees/#Term.Trees.TreeGuides-Tuple{Symbol, String}","page":"Trees","title":"Term.Trees.TreeGuides","text":"TreeGuides(guides_type::Symbol, style::String)\n\nGet tree guides with style information applied\n\n\n\n\n\n","category":"method"},{"location":"api/api_trees/#Base.show-Tuple{IO, Term.Trees.Tree}","page":"Trees","title":"Base.show","text":"Show/render a Tree\n\n\n\n\n\n","category":"method"},{"location":"api/api_trees/#Term.Trees.addnode!-Tuple{Vector{Term.Trees.Tree}, Vector{Term.Trees.Leaf}, Any, Any, AbstractDict}","page":"Trees","title":"Term.Trees.addnode!","text":"Add a new node to an existing tree's nodes or levaes.\n\n\n\n\n\n","category":"method"},{"location":"api/api_trees/#Term.Trees.asleaf","page":"Trees","title":"Term.Trees.asleaf","text":"asleaf\n\nStyle an object to render it as a a string\n\n\n\n\n\n","category":"function"},{"location":"api/api_trees/#Term.Trees.make_hierarchy_dict-Tuple{Tuple{Vararg{T, N}} where {N, T}, DataType, AbstractDict}","page":"Trees","title":"Term.Trees.make_hierarchy_dict","text":"make_hierarchy_dict(x::Vector{DataType}, T::DataType, Tsubs::AbstractDict)::AbstractDict\n\nRecursively create a dictionary with the types hierarchy for T. Tsubs carries information about T's subtypes. The AbstractDict is made backwards. From  the deepest levels up.\n\n\n\n\n\n","category":"method"},{"location":"api/api_trees/#Term.Trees.render-Tuple{Term.Trees.Tree}","page":"Trees","title":"Term.Trees.render","text":"render(tree::Tree)::Vector{Segment}\n\nRender a Tree into segments. Recursively handle nested trees.\n\n\n\n\n\n","category":"method"},{"location":"api/api_trees/#Term.Trees.style_T-Tuple{Any}","page":"Trees","title":"Term.Trees.style_T","text":"Apply style for the type whose hierarchy Tree we are making\n\n\n\n\n\n","category":"method"},{"location":"api/api_segments/#Segments","page":"Segments","title":"Segments","text":"","category":"section"},{"location":"api/api_segments/","page":"Segments","title":"Segments","text":"CurrentModule = Term.Segments","category":"page"},{"location":"api/api_segments/","page":"Segments","title":"Segments","text":"Pages   = [\"api_segments.md\"]","category":"page"},{"location":"api/api_segments/","page":"Segments","title":"Segments","text":"Modules = [Segments]","category":"page"},{"location":"api/api_segments/#Term.Segments.Segment","page":"Segments","title":"Term.Segments.Segment","text":"Segment\n\nstores one piece of text with all the styles applied to it.\n\n\n\n\n\n","category":"type"},{"location":"api/api_segments/#Term.Segments.Segment-Tuple{Any, String}","page":"Segments","title":"Term.Segments.Segment","text":"Segment(text::Union{Segment, AbstractString}, markup::AbstractString)\n\nConstruct a Segment out of a plain string and a markup string with style info\n\n\n\n\n\n","category":"method"},{"location":"api/api_segments/#Term.Segments.Segment-Tuple{Any}","page":"Segments","title":"Term.Segments.Segment","text":"Segment(text::AbstractString)\n\nConstruct a Segment out of a string with markup.\n\n\n\n\n\n","category":"method"},{"location":"api/api_segments/#Base.:*-Tuple{Term.Segments.Segment, AbstractString}","page":"Segments","title":"Base.:*","text":"concatenate strings and segments\n\n\n\n\n\n","category":"method"},{"location":"api/api_segments/#Term.fillin-Tuple{Vector{Term.Segments.Segment}}","page":"Segments","title":"Term.fillin","text":"Term.fillin(segments::Vector{Segment})::Vector{Segment}\n\nEnsure that for each segment the text has the same width\n\n\n\n\n\n","category":"method"},{"location":"adv/repr/#ReprDoc","page":"Term Repr","title":"Term Repr","text":"","category":"section"},{"location":"adv/repr/","page":"Term Repr","title":"Term Repr","text":"Note: by repr here we refer generically to how information about an object is represented in the terminal, not the repr function in Julia.","category":"page"},{"location":"adv/repr/#Type-REPR","page":"Term Repr","title":"Type REPR","text":"","category":"section"},{"location":"adv/repr/","page":"Term Repr","title":"Term Repr","text":"You can use Term.jl to create a styled type display in your console. ","category":"page"},{"location":"adv/repr/","page":"Term Repr","title":"Term Repr","text":"The easiest way to explain it is by way of example. Let's say you define a type, and create an instance of it:","category":"page"},{"location":"adv/repr/","page":"Term Repr","title":"Term Repr","text":"\n\nstruct myType\n    name::String\n    height::Int\n    width::Int\n    mass::Float64\nend\n\n\nobj = myType(\"Rocket\", 10, 10, 99.9)","category":"page"},{"location":"adv/repr/","page":"Term Repr","title":"Term Repr","text":"as you can see the default way to represent your object in the console is not very exciting.  But we can improve that with a simple macro!","category":"page"},{"location":"adv/repr/","page":"Term Repr","title":"Term Repr","text":"using Term.Repr\n\n@with_repr struct myFancyType\n    name::String\n    height::Int\n    width::Int\n    mass::Float64\nend\n\n\nobj = myFancyType(\"Rocket\", 10, 10, 99.9)","category":"page"},{"location":"adv/repr/","page":"Term Repr","title":"Term Repr","text":"now every time we display an instance of myFancyType in the console, we get a nice representation (note that that's not true for print(obj)!).","category":"page"},{"location":"adv/repr/","page":"Term Repr","title":"Term Repr","text":"warning: Docs display\nOoopss... it looks like the Panel display in the example above is not working out in the Docs. It will look fine in your REPL though!","category":"page"},{"location":"adv/repr/#Termshow","page":"Term Repr","title":"Termshow","text":"","category":"section"},{"location":"adv/repr/","page":"Term Repr","title":"Term Repr","text":"Very nice, but what if I don't have access to where the types are created (perhaps they are in another package) but still want to have the nice display? One way is to use termshow:","category":"page"},{"location":"adv/repr/","page":"Term Repr","title":"Term Repr","text":"\ndullobj = myType(\"Rocket\", 10, 10, 99.9)\ntermshow(dullobj)","category":"page"},{"location":"adv/repr/","page":"Term Repr","title":"Term Repr","text":"easy!","category":"page"},{"location":"adv/repr/","page":"Term Repr","title":"Term Repr","text":"But wait, there's more!","category":"page"},{"location":"adv/repr/","page":"Term Repr","title":"Term Repr","text":"termshow(termshow)  # or any other function","category":"page"},{"location":"adv/repr/","page":"Term Repr","title":"Term Repr","text":"Fancy right? It shows the function, various methods for it and it's docstrings (by parsing the Markdown). It works with types too","category":"page"},{"location":"adv/repr/","page":"Term Repr","title":"Term Repr","text":"import Term: Panel\ntermshow(Panel)","category":"page"},{"location":"adv/repr/","page":"Term Repr","title":"Term Repr","text":"and in general you can display almost any object","category":"page"},{"location":"adv/repr/","page":"Term Repr","title":"Term Repr","text":"termshow(Dict(:x => 1, :y => 2))\ntermshow(zeros(3, 3))","category":"page"},{"location":"adv/repr/#install-term-repr","page":"Term Repr","title":"install term repr","text":"","category":"section"},{"location":"adv/repr/","page":"Term Repr","title":"Term Repr","text":"Okay, termshow is pretty cool (even if I say so myself), but we need to call it every time we need to display something. I just want to type a variable name in the REPL (devs are lazy you know). Well, there's a solution for that too of course:","category":"page"},{"location":"adv/repr/","page":"Term Repr","title":"Term Repr","text":"install_term_repr()\nPanel","category":"page"},{"location":"adv/repr/","page":"Term Repr","title":"Term Repr","text":"now showing anything in the REPL goes through termshow","category":"page"},{"location":"adv/repr/","page":"Term Repr","title":"Term Repr","text":"warning: Not for developers!!!\nIf you're writing code just for yourself, go ahead and use install_term_repr. Enjoy it. But, if the code you're writing is intended for others you should really avoid doing that. It will modify the behavior of the REPL for them too and that's confusing and possibly error prone. ","category":"page"},{"location":"adv/repr/#@showme","page":"Term Repr","title":"@showme","text":"","category":"section"},{"location":"adv/repr/","page":"Term Repr","title":"Term Repr","text":"One of Julia's most loved features is multiple dispatch. However, sometimes it can be hard to know which method gets called by your code and what that method is doing. There's lots of tools out there to help with this, including some built in in Julia's base code. Here we show a nifty little macro that builds upon CodeTracking by Tim Holy to directly show you the method your code is calling:","category":"page"},{"location":"adv/repr/","page":"Term Repr","title":"Term Repr","text":"import Term.Repr: @showme\n\n@showme tprint(stdout, \"this is TERM\")  # which method is being called?","category":"page"},{"location":"adv/repr/","page":"Term Repr","title":"Term Repr","text":"as you can see, it shows the source code of the particular tprint method being called by the combination of arguments, for different arguments different methods will be invoked:","category":"page"},{"location":"adv/repr/","page":"Term Repr","title":"Term Repr","text":"@showme tprint(\"this is also TERM\")  # different method","category":"page"},{"location":"adv/repr/","page":"Term Repr","title":"Term Repr","text":"You can also list all methods for the function you're calling, should you wish to do so","category":"page"},{"location":"adv/repr/","page":"Term Repr","title":"Term Repr","text":"@showme tprint(\"still TERM\") show_all_methods=true","category":"page"},{"location":"adv/repr/","page":"Term Repr","title":"Term Repr","text":"Enjoy.","category":"page"},{"location":"adv/logging/#LoggingDoc","page":"Logging","title":"Logging","text":"","category":"section"},{"location":"adv/logging/","page":"Logging","title":"Logging","text":"Julia has a great logging system. If you come from other programming languages like Python you'll likely already love it, but it can be better!","category":"page"},{"location":"adv/logging/","page":"Logging","title":"Logging","text":"AS you know, if you use logging macros like @info with a bunch of arguments after, Julia produces something like this:","category":"page"},{"location":"adv/logging/","page":"Logging","title":"Logging","text":"@info \"My log message\" 1+1 n=\"a string!\" :x","category":"page"},{"location":"adv/logging/","page":"Logging","title":"Logging","text":"It shows your log messages and then the other arguments as key = value display even evaluating expressions like 1 + 1 and showing you the result. Very useful, but visually a bit dull. Also, we might want additional info to be shown: at what time was the log message produced, by which line of code, inside which function, what are the types of the arguments...","category":"page"},{"location":"adv/logging/","page":"Logging","title":"Logging","text":"Well, Term provides logging functionality that gives all that information, plus a ton of styling on top. To do that we need to install Term's own logger (TermLogger, very creative name) as the global logger to handle all error messages:","category":"page"},{"location":"adv/logging/","page":"Logging","title":"Logging","text":"import Term: install_term_logger\ninstall_term_logger()","category":"page"},{"location":"adv/logging/","page":"Logging","title":"Logging","text":"Done. Not a lot of work. Now you can just use your logging macros as you would normally, you don't need to change anything. But magic will happen:","category":"page"},{"location":"adv/logging/","page":"Logging","title":"Logging","text":"import Term: TermLogger, TERM_THEME; import Logging: with_logger # hide\nwith_logger(TermLogger(stderr, TERM_THEME[])) do # hide\n\n@info \"My log message\" 1+1 n=\"a string!\" :x\n\nend # hide","category":"page"},{"location":"adv/logging/","page":"Logging","title":"Logging","text":"As you can see, it shows all the information that is normally there, an more!  If your log macro is called from within a function, it will also tell you that:","category":"page"},{"location":"adv/logging/","page":"Logging","title":"Logging","text":"with_logger(TermLogger(stderr, TERM_THEME[])) do # hide\n\nfunction my_useful_function()\n    @info \"My log message\" 1+1 n=\"a string!\" :x\nend\n\nmy_useful_function()\n\nend # hide","category":"page"},{"location":"adv/logging/","page":"Logging","title":"Logging","text":"And of course it works nicely with all logging macros:","category":"page"},{"location":"adv/logging/","page":"Logging","title":"Logging","text":"with_logger(TermLogger(stderr, TERM_THEME[])) do # hide\n\n@info \"just some info\"\n@warn \"careful!\"\n@error \"uh oh, not good!\"\n\nend # hide","category":"page"},{"location":"adv/logging/","page":"Logging","title":"Logging","text":"warning: not for developers\nSetting up Term's loggers  will change this behavior for any downstream user of your code. While this could be okay, it might be surprising and undesirable for some, so do at your own risk. ","category":"page"},{"location":"adv/logging/","page":"Logging","title":"Logging","text":"tip: Tip\nYou can rever to the original logger using uninstall_term_logger.","category":"page"},{"location":"adv/logging/","page":"Logging","title":"Logging","text":"tip: Term and other log outputs\nSee here for some info on how to use Term's logger in conjuction with other logging outputs.","category":"page"},{"location":"adv/progressbars/#Progress-bars","page":"Progress bars","title":"Progress bars","text":"","category":"section"},{"location":"adv/progressbars/","page":"Progress bars","title":"Progress bars","text":"warning: Warning\nProgress bars displays are updated in the background while your code executes. This is done by having the display rendering code run on a separate thread. If you're using a single thread (see: https://docs.julialang.org/en/v1/manual/multi-threading/) you'll need to add a sleep(0.001) or yield() command inside your code whose progress you're monitoring to ensure that the display is updated correctly.","category":"page"},{"location":"adv/progressbars/#Overview","page":"Progress bars","title":"Overview","text":"","category":"section"},{"location":"adv/progressbars/","page":"Progress bars","title":"Progress bars","text":"Progress bars! We all love progress bars, and Julia has some great progress bars packages.  But this is Term, and Term too has its own progress bars API. We think you'll like it. If not, worry not! Term's progress bars play well ProgressLogging.jl, scroll to the bottom of this page!","category":"page"},{"location":"adv/progressbars/","page":"Progress bars","title":"Progress bars","text":"warning: Warning\nProgress bars do some terminal magic that doesn't play well with how the docs are rendered here. If you want to see what progress bars actually look like,  we encourage you to copy-paste the code below and try it out in your own console. Or head to github where you can find more examples.","category":"page"},{"location":"adv/progressbars/","page":"Progress bars","title":"Progress bars","text":"So this is what a progress bar looks like in Term:","category":"page"},{"location":"adv/progressbars/","page":"Progress bars","title":"Progress bars","text":"using Term.Progress\n\npbar = ProgressBar()\njob = addjob!(pbar; N=5)\nstart!(pbar)\nfor i in 1:5\n    update!(job)\n    sleep(0.01)\n    render(pbar)\nend\nstop!(pbar)","category":"page"},{"location":"adv/progressbars/","page":"Progress bars","title":"Progress bars","text":"Let's see what's happening. We start by creating a progress bar","category":"page"},{"location":"adv/progressbars/","page":"Progress bars","title":"Progress bars","text":"pbar = ProgressBar()","category":"page"},{"location":"adv/progressbars/","page":"Progress bars","title":"Progress bars","text":"and then we add a \"job\"","category":"page"},{"location":"adv/progressbars/","page":"Progress bars","title":"Progress bars","text":"job = addjob!(pbar; N=5)","category":"page"},{"location":"adv/progressbars/","page":"Progress bars","title":"Progress bars","text":"what's that? Term's ProgressBars can handle multiple \"jobs\" simultaneously. So if you have multiple things you want to keep track of (e.g. multiple nested loops), you can have a job for each. Next we start the progress bar:","category":"page"},{"location":"adv/progressbars/","page":"Progress bars","title":"Progress bars","text":"start!(pbar)","category":"page"},{"location":"adv/progressbars/","page":"Progress bars","title":"Progress bars","text":"we update the job at each step of the loop and render the updated display:","category":"page"},{"location":"adv/progressbars/","page":"Progress bars","title":"Progress bars","text":"    update!(job)\n    render(pbar)","category":"page"},{"location":"adv/progressbars/","page":"Progress bars","title":"Progress bars","text":"and finally we stop the whole thing:","category":"page"},{"location":"adv/progressbars/","page":"Progress bars","title":"Progress bars","text":"stop!(pbar)","category":"page"},{"location":"adv/progressbars/","page":"Progress bars","title":"Progress bars","text":".","category":"page"},{"location":"adv/progressbars/","page":"Progress bars","title":"Progress bars","text":"Okay, why do we need all of this starting and stopping business? Updating the job makes sense, we need to know when we made progress, but why do we need to start and stop the progress bar? Well, ProgressBar does a bit of terminal magic to ensure that any content you print to STDOUT is displayed without disrupting the progress bar's behavior, so we need to start and stop it to make sure that the magic happens and that the terminal is restored when we're done. ","category":"page"},{"location":"adv/progressbars/","page":"Progress bars","title":"Progress bars","text":"You might spot a problem: what if we forgot stop!, or our code errors before we reach it or something else like this? That's a problem, our terminal won't be restored. Well don't worry, there's a solution:","category":"page"},{"location":"adv/progressbars/","page":"Progress bars","title":"Progress bars","text":"\npbar = ProgressBar()\njob1 = addjob!(pbar; N=5)\njob2 = addjob!(pbar; N=10)\n\nwith(pbar) do\n    for i in 1:10\n        update!(job1)\n        update!(job2)\n        i % 3 == 0 && println(\"text appears here!\")\n        sleep(0.001)\n    end\nend","category":"page"},{"location":"adv/progressbars/","page":"Progress bars","title":"Progress bars","text":"info: `println` vs `print`\nYou'll notice we've used println in the example above. Currently, using print will break the layout and the text won't be printed correctly. Please use println while using ProgressBar!","category":"page"},{"location":"adv/progressbars/","page":"Progress bars","title":"Progress bars","text":"with takes care of it all. It starts the progress bar and stops it too! No matter what happens in the code inside the do block, with will stop the progress bar so we can use it with no fear. It also removes the need to explicitly call start!/stop!, which helps. We recommend that you always use with. ","category":"page"},{"location":"adv/progressbars/","page":"Progress bars","title":"Progress bars","text":"So with with we loose some of the boiler plate, but it's still a bit too much isn't it? It's cool if you need something specific, but if you want a simple progress bar to monitor progress in a loop perhaps you want something simpler. That's where @track comes in:","category":"page"},{"location":"adv/progressbars/","page":"Progress bars","title":"Progress bars","text":"@track for i in 1:10\n    sleep(0.01)\nend","category":"page"},{"location":"adv/progressbars/","page":"Progress bars","title":"Progress bars","text":"As simple as that!","category":"page"},{"location":"adv/progressbars/#ProgressJob","page":"Progress bars","title":"ProgressJob","text":"","category":"section"},{"location":"adv/progressbars/","page":"Progress bars","title":"Progress bars","text":"There's just couple things you need to know about ProgessJob. First, you can set the expected number of steps in the progress bar. We've seen that before, it's the N in addjob!(pbar; N=5). You don't have to though, if you don't know how long your job's going to be then just leave it out! In that case you won't see a progress bar, but you can still see some progress:","category":"page"},{"location":"adv/progressbars/","page":"Progress bars","title":"Progress bars","text":"pbar = ProgressBar(; columns=:spinner)\njob = addjob!(pbar; description=\"how long is this\")\n\nwith(pbar) do\n    for i in 1:10\n        update!(job)\n        sleep(0.001)\n    end\nend","category":"page"},{"location":"adv/progressbars/","page":"Progress bars","title":"Progress bars","text":"What's up with that columns=:spinner? Read below. By the way, there's a few different kind of spinners","category":"page"},{"location":"adv/progressbars/","page":"Progress bars","title":"Progress bars","text":"import Term.Progress: SPINNERS\n\nfor spinner in keys(SPINNERS)\n    columns_kwargs = Dict(\n        :SpinnerColumn => Dict(:spinnertype => spinner, :style=>\"bold green\"),\n        :CompletedColumn => Dict(:style => \"dim\")\n    )\n\n    pbar = ProgressBar(; columns=:spinner, columns_kwargs=columns_kwargs)\n    with(pbar) do\n        job = addjob!(pbar; description=\"{orange1}$spinner...\")\n        for i in 1:3\n            update!(job)\n            sleep(.0025)\n        end\n    end\nend\n","category":"page"},{"location":"adv/progressbars/#Options","page":"Progress bars","title":"Options","text":"","category":"section"},{"location":"adv/progressbars/","page":"Progress bars","title":"Progress bars","text":"The main way in which you can personalize progress bars display, is by choosing which columns to show (see below), but there's also a few additional parameters. You can use width to specify how wide the progress bar display should be, or set expand=true to make it fill up all available space. Also, sometimes you want to have a bunch of display bars to show progress in various bits of your code, but you don't want your final terminal display to be cluttered. In that case set transient=true and the progress bars will be erased when they're finished!","category":"page"},{"location":"adv/progressbars/#Columns","page":"Progress bars","title":"Columns","text":"","category":"section"},{"location":"adv/progressbars/","page":"Progress bars","title":"Progress bars","text":"As you've seen, each progress bar display shows various bits of information: some text description, the progress bar itself, a counts bit... Each of these is a \"column\" (a subtype of AbstractColumn). There's many types of columns showing different kinds of information, and you can make your own too (see below). Term offers different presets columns layouts do display varying levels of detail:","category":"page"},{"location":"adv/progressbars/","page":"Progress bars","title":"Progress bars","text":"for details in (:minimal, :default, :detailed)\n    pbar = ProgressBar(; columns=details, width=80)\n    with(pbar) do \n        job = addjob!(pbar; N=5)\n        for i in 1:5\n            update!(job)\n            sleep(0.02)\n        end\n    end\nend\n","category":"page"},{"location":"adv/progressbars/","page":"Progress bars","title":"Progress bars","text":"but you can also choose your own combination of columns:","category":"page"},{"location":"adv/progressbars/","page":"Progress bars","title":"Progress bars","text":"import Term.Progress: CompletedColumn, SeparatorColumn, ProgressColumn, DescriptionColumn\n\nmycols = [DescriptionColumn, CompletedColumn, SeparatorColumn, ProgressColumn]\ncols_kwargs = Dict(\n    :DescriptionColumn => Dict(:style=>\"red bold\")\n)\n\npbar = ProgressBar(; columns=mycols, columns_kwargs=cols_kwargs, width=140)\nwith(pbar) do \n    job = addjob!(pbar; N=5)\n    for i in 1:5\n        update!(job)\n        sleep(0.02)\n    end\nend","category":"page"},{"location":"adv/progressbars/","page":"Progress bars","title":"Progress bars","text":"what's that cols_kwargs? You can use that to pass additional parameters to each columns, e.g. to set its style.","category":"page"},{"location":"adv/progressbars/#Custom-columns","page":"Progress bars","title":"Custom columns","text":"","category":"section"},{"location":"adv/progressbars/","page":"Progress bars","title":"Progress bars","text":"If there some kind of information that you want to display and Term doesn't have a column for it, just make your own! ","category":"page"},{"location":"adv/progressbars/","page":"Progress bars","title":"Progress bars","text":"You need two things: a column type that is a subtype of AbstractColumn and an update! method to update the column's text at each step of the progress bar. Here's a, not very useful, example of a column that displays random text:","category":"page"},{"location":"adv/progressbars/","page":"Progress bars","title":"Progress bars","text":"using Random\n\nusing Term.Progress\nimport Term.Progress: AbstractColumn, DescriptionColumn, CompletedColumn, SeparatorColumn, ProgressColumn\nimport Term.Segments: Segment\nimport Term.Measures: Measure\n\nstruct RandomColumn <: AbstractColumn\n    job::ProgressJob\n    segments::Vector{Segment}\n    measure::Measure\n    style::String\n\n    function RandomColumn(job::ProgressJob; style=\"red\" )\n        txt = Segment(randstring(6), style)\n        return new(job, [txt], txt.measure, style)\n    end\nend\n\n\nfunction Progress.update!(col::RandomColumn, color::String, args...)::String\n    txt = Segment(randstring(6), col.style)\n    return txt.text\nend","category":"page"},{"location":"adv/progressbars/","page":"Progress bars","title":"Progress bars","text":"which you can use as you would any column:","category":"page"},{"location":"adv/progressbars/","page":"Progress bars","title":"Progress bars","text":"\nmycols = [DescriptionColumn, CompletedColumn, SeparatorColumn, ProgressColumn, RandomColumn]\ncols_kwargs = Dict(\n    :RandomColumn => Dict(:style=>\"green bold\")\n)\n\npbar = ProgressBar(; columns=mycols, columns_kwargs=cols_kwargs, width=140)\nwith(pbar) do \n    job = addjob!(pbar; N=5)\n    for i in 1:5\n        update!(job)\n        sleep(0.02)\n    end\nend\n","category":"page"},{"location":"adv/progressbars/","page":"Progress bars","title":"Progress bars","text":"done!","category":"page"},{"location":"adv/progressbars/#For-each-progress","page":"Progress bars","title":"For each progress","text":"","category":"section"},{"location":"adv/progressbars/","page":"Progress bars","title":"Progress bars","text":"Want to just wrap an iterable in a progress bar rendering? Check this out.","category":"page"},{"location":"adv/progressbars/","page":"Progress bars","title":"Progress bars","text":"using Term\nusing Term.Progress\n\npbar = Term.ProgressBar()\nforeachprogress(1:100, pbar,   description = \"Outer    \", parallel=true) do i\n    foreachprogress(1:5, pbar, description = \"    Inner\") do j\n        sleep(rand() / 5)\n    end\nend","category":"page"},{"location":"adv/progressbars/","page":"Progress bars","title":"Progress bars","text":"The loop above will render a progress bar for each iteration of the outer loop, and a progress bar for each iteration of the inner loop - easy.","category":"page"},{"location":"adv/progressbars/#ProgressLogging","page":"Progress bars","title":"ProgressLogging","text":"","category":"section"},{"location":"adv/progressbars/","page":"Progress bars","title":"Progress bars","text":"I know that some of you will be thinking: hold on, Julia already had a perfectly functioning progress API with ProgressLogging.jl, can't we just use that? Long story short, yes you can. But Term's API gives you so much more control over what kind information to display and what it should look like. Nonetheless, many of you will want to use ProgressLogging in conjunction with Term, so we've made it possible, you just need to use Term's logger (see Logger):","category":"page"},{"location":"adv/progressbars/","page":"Progress bars","title":"Progress bars","text":"using ProgressLogging\nimport Term: install_term_logger\ninstall_term_logger()\n\n@progress \"outer....\" for i in 1:3\n    sleep(0.01)\nend\n","category":"page"},{"location":"api/api_progressbars/#ProgressBars","page":"ProgressBars","title":"ProgressBars","text":"","category":"section"},{"location":"api/api_progressbars/","page":"ProgressBars","title":"ProgressBars","text":"CurrentModule = Term.Progress","category":"page"},{"location":"api/api_progressbars/","page":"ProgressBars","title":"ProgressBars","text":"Pages   = [\"api_progress.md\"]","category":"page"},{"location":"api/api_progressbars/","page":"ProgressBars","title":"ProgressBars","text":"Modules = [Progress]","category":"page"},{"location":"api/api_progressbars/#Term.Progress.ProgressBar","page":"ProgressBars","title":"Term.Progress.ProgressBar","text":"ProgressBar\n\nProgressbar Type, stores information required to render progress bar renderables for each ProgressJob assigned.\n\nProgressBar takes care of the work needed to setup/update progress bar(s) visualizations. Each individual bar corresponds to a (running) ProgressJob and ProgressJob itself is what actually creates the visuals. Most of the work done by ProgressBar is to handling terminal stuff, move cursor position, change scrolling regions, clear/update sections etc.\n\nArguments:     - jobs: vector of ProgressJob to assign to the progress bar (more can added later)     - width: width of the visualization, if expand=false     - columns: which columns to show? Either a vector of column types or the name of a preset     - column_kwargs: keyword arguments to pass to each column     - transient: if true jobs disappear when done (and the whole pbar when all jobs are done)     - colors: set of 3 RGBColor to change the color of the progress bar with progress     - Δt: delay between refreshes of the visualization.     - buff: IOBuffer used to render the progress bars     - running: true if the progress bar is active     - paused: false when the bar is running but briefly paused (e.g. to update jobs)     - task: references a Task for updating the progress bar in parallel     - renderstatus: a RenderStatus instance.\n\n\n\n\n\n","category":"type"},{"location":"api/api_progressbars/#Term.Progress.ProgressBar-Tuple{}","page":"ProgressBars","title":"Term.Progress.ProgressBar","text":"ProgressBar(;\n    width::Int=80,\n    columns::Union{Vector{DataType}, Symbol} = :default,\n    columns_kwargs::Dict = Dict(),\n    expand::Bool=false,\n    transient::Bool = false,\n    colors::Vector{RGBColor} = [\n        RGBColor(\"(1, .05, .05)\"),\n        RGBColor(\"(.05, .05, 1)\"),\n        RGBColor(\"(.05, 1, .05)\"),\n    ],\n    refresh_rate::Int=60,  # FPS of rendering\n)\n\nCreate a ProgressBar instance.\n\n\n\n\n\n","category":"method"},{"location":"api/api_progressbars/#Term.Progress.ProgressJob","page":"ProgressBars","title":"Term.Progress.ProgressJob","text":"ProgressJob\n\nSingle job whose progress we're tracking with a progress bar.\n\nEach progress bar can have multiple jobs running at the same time, and more can be added/removed at any time. Each ProgressJob keeps track of the state (progress) of each of these jobs. ProgressJob is also rendered to create the visual display of the progress bar.\n\nArguments:\n\nid specifies the job;s unique id\ni: keeps track of the progress (number of completed steps)\nN: total number of steps in the task at hand. Optional, set to nothing when not known\ndescription: a bit of text describing what the job is\ncolumns: set of AbstractColumn used to represent the job's information\ncolumns_kwargs: additional information passed to each column when created (e.g. to set style)\nwidth: width of the progress bar display\nstarted: whether the job was started or not.\nstopped: whether the job was stopped (finished job)\nstartime: time at which job was started\nstoptime: time at which job was stopped\ntransient: if truee the job's visual display disappears when stopped=true\n\n\n\n\n\n","category":"type"},{"location":"api/api_progressbars/#Term.Progress.RenderStatus","page":"ProgressBars","title":"Term.Progress.RenderStatus","text":"RenderStatus\n\nKeep track of rendering information for a ProgressBar\n\n\n\n\n\n","category":"type"},{"location":"api/api_progressbars/#Term.Progress.addjob!-Tuple{Term.Progress.ProgressBar}","page":"ProgressBars","title":"Term.Progress.addjob!","text":"addjob!(\n        pbar::ProgressBar;\n        description::String=\"Running...\",\n        N::Union{Int, Nothing}=nothing,\n        start::Bool=true,\n        transient::Bool=false,\n        id=nothing\n    )::ProgressJob\n\nAdd a new ProgressJob to a running ProgressBar\n\nSee also: removejob!, getjob\n\n\n\n\n\n","category":"method"},{"location":"api/api_progressbars/#Term.Progress.foreachprogress","page":"ProgressBars","title":"Term.Progress.foreachprogress","text":"foreachprogress(f, iter[, pbar; parallel=false, transient=true, description])\n\nApply f to every element in iterator iter, showing a progress bar. This function can be nested.\n\nArguments\n\npbar::Term.Progress.ProgressBar = Term.FOREACH_PROGRESS: The progress bar to use. By   default, uses a global progress bar, but it is recommended to explicitly pass in   a progress bar.\nparallel: Whether to use Threads.@threads to speed up the loop.\ntransient = true: See Term.Progress.addjob!\ndescription = true: See Term.Progress.addjob!\n\nExamples\n\nSimple loop passing in a progress bar:\n\nforeachprogress(1:10, Term.ProgressBar(); description = \"Working...\") do i\n    @info i\n    sleep(0.1)\nend\n\nSimple loop using the global progress bar (use with care):\n\nforeachprogress(1:10; description = \"Working...\") do i\n    @info i\n    sleep(0.1)\nend\n\nNesting a loop inside another:\n\npbar = Term.ProgressBar()\nforeachprogress(1:100, pbar,   description = \"Outer    \", parallel=true) do i\n    foreachprogress(1:5, pbar, description = \"    Inner\") do j\n        sleep(rand() / 5)\n    end\nend\n\nSpeeding up the loop using threads by passing parallel:\n\nforeachprogress(1:50; description = \"Working...\", parallel=true) do i\n    @info i\n    sleep(0.1)\nend\n\n\n\n\n\n","category":"function"},{"location":"api/api_progressbars/#Term.Progress.getjob-Tuple{Term.Progress.ProgressBar, Any}","page":"ProgressBars","title":"Term.Progress.getjob","text":"getjob(pbar::ProgressBar, id)\n\nGet a ProgressBar's ProgressJob by id.\n\n\n\n\n\n","category":"method"},{"location":"api/api_progressbars/#Term.Progress.jobcolor-Tuple{Term.Progress.ProgressBar, Term.Progress.ProgressJob}","page":"ProgressBars","title":"Term.Progress.jobcolor","text":"jobcolor(job::ProgressJob)\n\nGet the RGB color of of a progress bar's bar based on progress.\n\n\n\n\n\n","category":"method"},{"location":"api/api_progressbars/#Term.Progress.removejob!-Tuple{Term.Progress.ProgressBar, Term.Progress.ProgressJob}","page":"ProgressBars","title":"Term.Progress.removejob!","text":"removejob!(pbar::ProgressBar, job::ProgressJob)\n\nRemove a ProgressJob from a ProgressBar.\n\nSee also: addjob!, getjob\n\n\n\n\n\n","category":"method"},{"location":"api/api_progressbars/#Term.Progress.render-Tuple{Term.Progress.ProgressBar}","page":"ProgressBars","title":"Term.Progress.render","text":"render(job::ProgressJob, pbar::ProgressBar)::String\n\nRender a ProgressBar.\n\nWhen a progress bar is first rendered, this function uses ANSI codes to change the scrolling region of the terminal window to create a space at the bottom where the bar's visuals can be displayed. This allows for thext printed to stdout to still be visualized. On subsequent calls, this function ensures that the height of the reserved space matches the number of running jobs.\n\nAll fo this requires a bit of careful work in moving the cursor around and doing ANSI magic.\n\n\n\n\n\n","category":"method"},{"location":"api/api_progressbars/#Term.Progress.render-Tuple{Term.Progress.ProgressJob, Term.Progress.ProgressBar}","page":"ProgressBars","title":"Term.Progress.render","text":"render(job::ProgressJob, pbar::ProgressBar)::String\n\nRender a ProgressJob\n\n\n\n\n\n","category":"method"},{"location":"api/api_progressbars/#Term.Progress.render-Tuple{Term.Progress.ProgressJob}","page":"ProgressBars","title":"Term.Progress.render","text":"render(job::ProgressJob, pbar::ProgressBar)::String\n\nRender a ProgressJob\n\n\n\n\n\n","category":"method"},{"location":"api/api_progressbars/#Term.Progress.start!-Tuple{Term.Progress.ProgressBar}","page":"ProgressBars","title":"Term.Progress.start!","text":"start!(pbar::ProgressBar)\n\nStart a ProgressBar and run a Task to update its visuals.\n\nStarts a parallel Task for updating the ProgressBar visualization while other code runs. The task is stopped when the progress bar is set to have running=false\n\nSee also stop!\n\n\n\n\n\n","category":"method"},{"location":"api/api_progressbars/#Term.Progress.start!-Tuple{Term.Progress.ProgressJob}","page":"ProgressBars","title":"Term.Progress.start!","text":"start!(job::ProgressJob)\n\nStart a newly created ProgressJob.\n\nWhen starting a job, take care of creating instance of AbstractColumns to display the job's progress. If N is nothing, remove any ProgressColumn\n\n\n\n\n\n","category":"method"},{"location":"api/api_progressbars/#Term.Progress.stop!-Tuple{Term.Progress.ProgressBar}","page":"ProgressBars","title":"Term.Progress.stop!","text":"stop!(pbar::ProgressBar)\n\nStop a running ProgressBar.\n\nStops the Task updating the progress bar visuals too, and if the progress bar was transient it clears up the visuals.\n\n\n\n\n\n","category":"method"},{"location":"api/api_progressbars/#Term.Progress.stop!-Tuple{Term.Progress.ProgressJob}","page":"ProgressBars","title":"Term.Progress.stop!","text":"stop!(job::ProgressJob)\n\nStop a running job.\n\n\n\n\n\n","category":"method"},{"location":"api/api_progressbars/#Term.Progress.with-Tuple{Any, Term.Progress.ProgressBar}","page":"ProgressBars","title":"Term.Progress.with","text":"with(expr, pbar::ProgressBar)\n\nWrap an expression to run code in the context of a progress bar.\n\nEnsures that the progress bar is correctly created and distroyed even if code within the loop whose progress we're monitoring causes and error. Since render changes the scrollregion in the terminal, we need to make sure that we can restore things no matter what.\n\nExamples\n\npbar = ProgressBar()\nwith(pbar) do\n    job = addjob!(pbar; description=\"Running\")\n    for i in 1:500\n        update!(job)\n        sleep(.0025)\n    end\nend\n\n\n\n\n\n","category":"method"},{"location":"api/api_progressbars/#Term.update!-Tuple{Term.Progress.ProgressJob}","page":"ProgressBars","title":"Term.update!","text":"update!(job::ProgressJob; i = nothing)\n\nUpdate a job's progress i by setting its value or adding +1.\n\n\n\n\n\n","category":"method"},{"location":"api/api_progressbars/#Term.Progress.@track-Tuple{Any}","page":"ProgressBars","title":"Term.Progress.@track","text":"@track(ex)\n\nMacro to wrap a loop in a progress bar.\n\nLike with it wraps the expression code in a try/finally statement to ensure that the progress bar is correctly stopped in any situation.\n\nExamples\n\n@track for i in 1:10\n    sleep(0.1)\nend\n\n\n\n\n\n","category":"macro"},{"location":"api/api_colors/#Colors","page":"Colors","title":"Colors","text":"","category":"section"},{"location":"api/api_colors/","page":"Colors","title":"Colors","text":"CurrentModule = Term.Colors","category":"page"},{"location":"api/api_colors/","page":"Colors","title":"Colors","text":"Pages   = [\"api_colors.md\"]","category":"page"},{"location":"api/api_colors/","page":"Colors","title":"Colors","text":"Modules = [Colors]","category":"page"},{"location":"api/api_colors/#Term.ANSICode-Tuple{Term.Colors.NamedColor}","page":"Colors","title":"Term.ANSICode","text":"ANSICode(color; bg::Bool=false)\n\nCreate ANSI tags for colors.\n\n\n\n\n\n","category":"method"},{"location":"api/api_colors/#Term.Colors.AbstractColor","page":"Colors","title":"Term.Colors.AbstractColor","text":"AbstractColor\n\nAbstract color type.\n\n\n\n\n\n","category":"type"},{"location":"api/api_colors/#Term.Colors.get_color-Tuple{Any}","page":"Colors","title":"Term.Colors.get_color","text":"get_color(string::String; bg=false)::AbstractColor\n\nExtract a color type from a string with color information.\n\n\n\n\n\n","category":"method"},{"location":"api/api_colors/#Term.Colors.hex2rgb-Tuple{Any}","page":"Colors","title":"Term.Colors.hex2rgb","text":"hex2rgb(hex::String)\n\nConverts a string hex color code to a RGB color\n\n\n\n\n\n","category":"method"},{"location":"api/api_colors/#Term.Colors.is_background-Tuple{Any}","page":"Colors","title":"Term.Colors.is_background","text":"is_background(string::String)::Bool\n\nCheck if a string represents background color information, of any type.\n\n\n\n\n\n","category":"method"},{"location":"api/api_colors/#Term.Colors.is_color-Tuple{Any}","page":"Colors","title":"Term.Colors.is_color","text":"is_color(string::String)::Bool\n\nCheck if a string represents color information, of any type.\n\n\n\n\n\n","category":"method"},{"location":"api/api_colors/#Term.Colors.is_hex_color-Tuple{Any}","page":"Colors","title":"Term.Colors.is_hex_color","text":"is_hex_color(string::String)::Bool\n\nCheck if a string represents a hex color.\n\n\n\n\n\n","category":"method"},{"location":"api/api_colors/#Term.Colors.is_named_color-Tuple{Any}","page":"Colors","title":"Term.Colors.is_named_color","text":"is_named_color(string::String)::Bool\n\nCheck if a string represents a named color.\n\n\n\n\n\n","category":"method"},{"location":"api/api_colors/#Term.Colors.is_rgb_color-Tuple{Any}","page":"Colors","title":"Term.Colors.is_rgb_color","text":"is_rgb_color(string::String)::Bool\n\nCheck if a string represents a RGB color.\n\n\n\n\n\n","category":"method"},{"location":"api/api_introspection/#Introspection","page":"Introspection","title":"Introspection","text":"","category":"section"},{"location":"api/api_introspection/","page":"Introspection","title":"Introspection","text":"CurrentModule = Term.Introspection","category":"page"},{"location":"api/api_introspection/","page":"Introspection","title":"Introspection","text":"Pages   = [\"api_introspection.md\"]","category":"page"},{"location":"api/api_introspection/","page":"Introspection","title":"Introspection","text":"Modules = [Introspection]","category":"page"},{"location":"api/api_introspection/#Term.Introspection.get_docstring-Tuple{Any}","page":"Introspection","title":"Term.Introspection.get_docstring","text":"get_docstring(obj)\n\nExtract and style an object's docstring.\n\n\n\n\n\n","category":"method"},{"location":"api/api_introspection/#Term.Introspection.inspect-Tuple{Union{DataType, Union}}","page":"Introspection","title":"Term.Introspection.inspect","text":"inspect(T::DataType; documentation::Bool=false, constructors::Bool=true, methods::Bool=true, supertypes::Bool=true)\n\nInspect a DataType to show info such as docstring, constructors and methods. Flags can be used to choose the level of detail in the information presented:\n\ndocumentation: show docstring with termshow\nconstructors: show T constructors\nmethods: show methods using T in their signature\nsupertypes: show methods using T's supertypes in their signature\n\n\n\n\n\n","category":"method"},{"location":"api/api_introspection/#Term.Introspection.style_methods-Tuple{Union{Base.MethodList, Vector{Method}}, AbstractString}","page":"Introspection","title":"Term.Introspection.style_methods","text":"style_methods(methods::Union{Vector{Base.Method}, Base.MethodList}, tohighlight::AbstractString)\n\nCreate a Renderable with styled Method information for inspect(::DataType)\n\n\n\n\n\n","category":"method"},{"location":"layout/stacking/#Stacking","page":"Stacking","title":"Stacking","text":"","category":"section"},{"location":"layout/stacking/","page":"Stacking","title":"Stacking","text":"The idea is simple: horizontally stack two renderables and they will appear side by side, stack them vertically and they will appear one over the other. The syntax is even simpler: * lets you horizontally stack (or concatenate strings) and / lets you stack them vertically.","category":"page"},{"location":"layout/stacking/","page":"Stacking","title":"Stacking","text":"note: Note\nThe choice of * and / as operators for stacking operations was somewhat arbitrary. * was chosen because it's already what Julia uses to concatenate strings, and you can think of that as \"horizontally stacking them\". / was chosen because it reminds me of fractions, and fractions have one number over another. If you don't like to use these operators, you're in luck! They are really just a  shorthand notation for the functions hstack & vstack. You'll find that this notation makes for some pretty nifty code though.","category":"page"},{"location":"layout/stacking/","page":"Stacking","title":"Stacking","text":"Let's stack things:","category":"page"},{"location":"layout/stacking/","page":"Stacking","title":"Stacking","text":"\nimport Term: Panel # hide\n\nprintln(\n    Panel(\"horizontally\"; fit=true) * Panel(\"stacked\"; fit=true)\n)\nprintln(\"&\\n\")\nprintln(\n    Panel(\"vertically\"; fit=true) / Panel(\"stacked\"; fit=true)\n)\n","category":"page"},{"location":"layout/stacking/","page":"Stacking","title":"Stacking","text":"As simple as that. But you can also go crazy if you like:","category":"page"},{"location":"layout/stacking/","page":"Stacking","title":"Stacking","text":"\nimport Term: Panel # hide\n\np = Panel(width=5)\nprintln(\n    (p * p * p) / (p * (p/p)) / (p * p * \"{bold red}supripse!{/bold red}\")\n)","category":"page"},{"location":"layout/stacking/","page":"Stacking","title":"Stacking","text":"what's that red text doing in there? We didn't use tprint, or apply_style, we didn't put it into a RenderableText or a TextBox (see Renderables)... why didn't it print as \"{bold red}supripse!{/bold red}\"??","category":"page"},{"location":"layout/stacking/","page":"Stacking","title":"Stacking","text":"The answer is that stacking operators return the generic Renderable type object, and Renderables apply their styles before printing out to console. Okay, not a huge surprise I guess, but I just wanted an excuse to say that regardless of what goes into * and / the output is a generic Renderable (well with the exception of * between two strings which returns a string; also * and / don't work with things like ::Number & co., but you get the idea). The reason for the generic Renderable type is that the product of two stacked renderables should act as a unitary single renderable in its own right. You should be able to print it, stack it etc... So Renderable is the simplest type of renderable that can do this (it only has segments and measure, no other features - see previous section), so when we stack together multiple different types of renderables we create a generic container. ","category":"page"},{"location":"layout/stacking/","page":"Stacking","title":"Stacking","text":"Previously we briefly mentioned the idea of the Measure or a renderable object. Measure stores information about the width and height of a renderable as it will appear in the terminal. When we stack renderables, the Measure of the resulting Renderable will do the following:","category":"page"},{"location":"layout/stacking/","page":"Stacking","title":"Stacking","text":"if we are using * the width will be the sum of widths of the two renderables and the height will be the height  of the tallest renderable\nif we are using / the width will be that of the widest renderable and the height will be the sum of heights. ","category":"page"},{"location":"layout/stacking/","page":"Stacking","title":"Stacking","text":"Let's see:","category":"page"},{"location":"layout/stacking/","page":"Stacking","title":"Stacking","text":"import Term: Panel # hide\np1 = Panel(height=5, width=5)\nprintln(\"p1.measure: \", p1.measure)\n\n\np2 = Panel(height=5, width=8)\nprintln(\"p2.measure: \", p2.measure)\n\nh = p1 * p2\nprintln(\"* stacked measure: \", h.measure)\n\nv = p1 / p2\nprintln(\"/ stacked measure: \", v.measure)","category":"page"},{"location":"layout/stacking/","page":"Stacking","title":"Stacking","text":"This is important, because often you want to know a Renderable's size when creating a layout, as we'll see next.","category":"page"},{"location":"layout/stacking/#vstack,-hstack-and-padding","page":"Stacking","title":"vstack, hstack & padding","text":"","category":"section"},{"location":"layout/stacking/","page":"Stacking","title":"Stacking","text":"When stacking more than 2 renderables at one time, it's probably easier to use vstack or hstack than to use * and / directly:","category":"page"},{"location":"layout/stacking/","page":"Stacking","title":"Stacking","text":"import Term.Layout: vstack, hstack # hide\nimport Term: Panel # hide\np1 = Panel(height=4, width=8) # hide\n\np1 * p1 * p1 * p1","category":"page"},{"location":"layout/stacking/","page":"Stacking","title":"Stacking","text":"can be written as:","category":"page"},{"location":"layout/stacking/","page":"Stacking","title":"Stacking","text":"hstack(p1, p1, p1, p1)","category":"page"},{"location":"layout/stacking/","page":"Stacking","title":"Stacking","text":"which is easier to read. But more importantly. vstack and hstack let you define a padding (spacing) between the renderables being stacked:","category":"page"},{"location":"layout/stacking/","page":"Stacking","title":"Stacking","text":"hstack(p1, p1, p1, p1; pad=8)","category":"page"},{"location":"layout/stacking/","page":"Stacking","title":"Stacking","text":"and ","category":"page"},{"location":"layout/stacking/","page":"Stacking","title":"Stacking","text":"vstack(p1, p1, p1, p1; pad=1)","category":"page"},{"location":"layout/stacking/","page":"Stacking","title":"Stacking","text":"which is equivalent but much nicer than:","category":"page"},{"location":"layout/stacking/","page":"Stacking","title":"Stacking","text":"space = \" \"^8  # or use Spacer\np1 * space * p1 * space * p1 ","category":"page"},{"location":"layout/nesting/#Nesting","page":"Nesting","title":"Nesting","text":"","category":"section"},{"location":"layout/nesting/","page":"Nesting","title":"Nesting","text":"The simplest way to create a layout with multiple elements: put one into the other. We've already seen how you can do it with Panels:","category":"page"},{"location":"layout/nesting/","page":"Nesting","title":"Nesting","text":"\nimport Term: Panel # hide\n\n\nPanel(\n    Panel(\n        Panel(\n            \"We need to go deeper...\",\n            height=3,\n            width=28,\n            style=\"green\",\n            box=:ASCII,\n            title=\"ED\",title_style=\"white\",\n            justify=:center\n        ),\n        style=\"red\", box=:HEAVY, title=\"ST\", title_style=\"white\", fit=true\n    ),\n    width=44, justify=:center, style=\"blue\", box=:DOUBLE, title=\"NE\", title_style=\"white\"\n)\n","category":"page"},{"location":"layout/nesting/","page":"Nesting","title":"Nesting","text":"okay, nothing crazy here - but we can actually achieve some nice looking layouts with this alone:","category":"page"},{"location":"layout/nesting/","page":"Nesting","title":"Nesting","text":"import Term: Panel, TextBox\n\ntitle = Panel(\n    \"{white bold}This is an {red} important {/red}title{/white bold}\";\n    width=60, fit=false, box=:DOUBLE_EDGE, style=\"bright_blue dim\", justify=:center\n)\nsummary = Panel(\n    \"This is a short summary of the content of the next paragraph.\"^5;\n    width=60, fit=false, style=\"dim\", justify=:left,\n    padding=(4, 4, 1, 1), title=\"Summary\", title_style=\"white default\"\n)\n\nmain_text = TextBox(\n    \"This is a very long paragraph with a lot of text you don't need to read.\"^10;\n    width=60, fit=false, style=\"bright_blue dim\", justify=:left\n)\n\nPanel(title, summary, main_text; style=\"#9bb3e0\", subtitle=\"Techical details\", \nsubtitle_justify=:right, subtitle_style=\"yellow default\"\n)","category":"page"},{"location":"layout/nesting/#Nested-layouts?-No-head-ache","page":"Nesting","title":"Nested layouts? No head ache","text":"","category":"section"},{"location":"layout/nesting/","page":"Nesting","title":"Nesting","text":"If you want to have several nested panels, you might want to make sure that their widths are set correctly so that they fit nicely together. There's a macro for that!","category":"page"},{"location":"layout/nesting/","page":"Nesting","title":"Nesting","text":"import Term: @nested_panels\n@nested_panels Panel(\n    Panel(\n        Panel(\n            Panel(\n                ; title=\"deepest\", style=\"blue\", background=\"blue\"\n            ); title=\"deeper\", style=\"green\");\n        title=\"not so deep\");\n    style=\"red\",\n    title=\"outer\"\n) ","category":"page"},{"location":"layout/nesting/","page":"Nesting","title":"Nesting","text":"It sets the width of each panel to match their depth. It only works if you're actively calling Panel() in the macro call. something like this won't work:","category":"page"},{"location":"layout/nesting/","page":"Nesting","title":"Nesting","text":"another_panel = Panel(\"this won't work\")\n@nested_panels Panel(\n    Panel(\n        Panel(\n            Panel(\n                another_panel,\n                ; title=\"deepest\", \n            ); title=\"deeper\", style=\"green\");\n        title=\"not so deep\");\n    style=\"red\",\n    title=\"outer\"\n) \n","category":"page"},{"location":"layout/nesting/","page":"Nesting","title":"Nesting","text":"This is all nice, but, that's not enough... so let' see what more we can do!","category":"page"},{"location":"ren/tree/#TreeDoc","page":"Tree","title":"Tree","text":"","category":"section"},{"location":"ren/tree/","page":"Tree","title":"Tree","text":"The Tree renderable shows hierarchical structures:","category":"page"},{"location":"ren/tree/","page":"Tree","title":"Tree","text":"import Term.Trees: Tree\n\ndata = Dict(\n    \"a\" => 1,\n    \"b\" => Int64,\n    \"c\" => (1, 2, 3),\n)\n\nprint(Tree(data))","category":"page"},{"location":"ren/tree/","page":"Tree","title":"Tree","text":"As you can see, the starting point is a Dict with key -> value entries which get rendered as leaves in the tree. Also, the Type of value is shown by colors in the tree.","category":"page"},{"location":"ren/tree/","page":"Tree","title":"Tree","text":"If you have nested data, just create nested dictionaries!","category":"page"},{"location":"ren/tree/","page":"Tree","title":"Tree","text":"\ndata = Dict(\n    \"a\" => 1,\n    \"b\" => Int64,\n    \"deep\" => Dict(\n            \"x\" => 1,\n            \"y\" => :x\n    ),\n)\n\nprint(Tree(data))","category":"page"},{"location":"ren/tree/","page":"Tree","title":"Tree","text":"Easy! Tree has lots of options to allow you to style it as you like:","category":"page"},{"location":"ren/tree/","page":"Tree","title":"Tree","text":"print(\n    Tree(data,\n        title=\"my custom tree\",\n        title_style=\"red\",\n        guides_style=\"green\",\n        guides_type=:boldtree\n    \n    )\n)","category":"page"},{"location":"ren/tree/","page":"Tree","title":"Tree","text":"And of course trees behave just like any renderable so you can create layouts with them:","category":"page"},{"location":"ren/tree/","page":"Tree","title":"Tree","text":"import Term: Panel, Tree\ndata = Dict(\n    \"a\" => 1,\n    \"b\" => Int64,\n    \"deep\" => Dict(\n            \"x\" => 1,\n            \"y\" => :x\n    ),\n)\n\ntree = Tree(data)\n\nprint(\n    (\"\\n\" / tree) * \"  \" * Panel(tree; fit=true)\n)","category":"page"},{"location":"ren/tree/","page":"Tree","title":"Tree","text":"tip: Entries order\nUsed OrderedCollections.OrderedDict instead of Dict if you want to specify the order of entries in the Tree.","category":"page"},{"location":"ren/tree/#TypeTree","page":"Tree","title":"TypeTree","text":"","category":"section"},{"location":"ren/tree/","page":"Tree","title":"Tree","text":"As you know, Julia allows for hierarchical types structures. Trees are for visualizing hierarchical data structures. So...","category":"page"},{"location":"ren/tree/","page":"Tree","title":"Tree","text":"import Term: typestree\n\ntypestree(AbstractFloat)","category":"page"},{"location":"ren/tree/","page":"Tree","title":"Tree","text":"Enjoy!","category":"page"},{"location":"basics/console/#Console","page":"Console","title":"Console","text":"","category":"section"},{"location":"basics/console/","page":"Console","title":"Console","text":"Term provides a Console object whose main function (for now) is to simulate having a terminal with a size different from what you actually have. Imagine that your terminal is currently 100 columns wide, but you want to simulate having a narrower one (why? Don't know, but assume that's the case), then using Console allows you to do just that. ","category":"page"},{"location":"basics/console/","page":"Console","title":"Console","text":"It may seems like a fairly niche thing to have, but can actually be useful if you want to ensure that the output of your package looks the same for all users regardless of their terminal size. Also Console will do a lot more in the future.","category":"page"},{"location":"basics/console/","page":"Console","title":"Console","text":"using Term: tprintln\nusing Term.Consoles: Console, enable, disable\n\ntprintln(\"This is a very long text\"^10)\n\nmyc = Console(40)  # 40 columns wide\nmyc |> enable  # activate it\n\n\ntprintln(\"This is a very long text\"^10)  # get's reshaped to fit in 60cols\n\nmyc |> disable  # de-activate the console\n\ntprintln(\"This is a very long text\"^10)\n","category":"page"},{"location":"basics/console/","page":"Console","title":"Console","text":"it also works for any Renderable made with Term:","category":"page"},{"location":"basics/console/","page":"Console","title":"Console","text":"using Term: tprintln # hide\nusing Term.Consoles: Console, enable, disable #hide\n\nprint(Panel())\n\nmyc = Console(40)  # 40 columns wide\nmyc |> enable  # activate it\n\n\nprint(Panel())  # get's reshaped to fit in 60cols\n\nmyc |> disable  # de-activate the console\n\nprint(Panel())\n","category":"page"},{"location":"basics/console/","page":"Console","title":"Console","text":"warning: print vs tprint\nConsole reshapes the output of a print call only if this is not just a plain String. Any renderables you're using will be re-shaped. If it's just a string, the default Base.print method will be called and there's nothing we can do about it. One possible work-around is using Term's tprint which will take the Console in consideration, alternatively wrap your strings in RenderableText objects.","category":"page"}]
}
